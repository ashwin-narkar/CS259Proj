// -------------------------------------------------------------
// 
// File Name: hdlsrc\RNN_Activation\nfp_tanh_single.v
// Created: 2021-06-11 12:50:00
// 
// Generated by MATLAB 9.9 and HDL Coder 3.17
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: nfp_tanh_single
// Source Path: RNN_Activation/nfp_tanh_single
// Hierarchy Level: 1
// 
// {Latency Strategy = "Zero"}
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module nfp_tanh_single
          (nfp_in,
           nfp_out);


  input   [31:0] nfp_in;  // ufix32
  output  [31:0] nfp_out;  // ufix32


  wire aSign;  // ufix1
  wire [7:0] aExponent;  // ufix8
  wire [22:0] aMantissa;  // ufix23
  wire aExponent_cfType_Exponent_I_1_out1;  // ufix1
  wire aExponent_cfType_Exponent_I_2_out1;  // ufix1
  wire Logical_Operator_out1;  // ufix1
  wire alpha0_out1;  // ufix1
  wire alpha127_6_out1;  // ufix1
  wire Constant_out1;  // ufix1
  wire signed [35:0] Constant3_out1;  // sfix36_En33
  wire [1:0] Constant3_out1_1;  // ufix2
  wire Constant_out1_1;  // ufix1
  wire [23:0] Bit_Concat_out1;  // ufix24
  wire [23:0] reinterpretcast_mant_cor_nume_out1;  // ufix24_En23
  wire [9:0] Constant4_out1;  // ufix10
  wire [35:0] Bit_Concat2_out1;  // ufix36
  wire signed [35:0] Data_Type_Conversion2_out1;  // sfix36_En33
  wire signed [35:0] Switch4_out1;  // sfix36_En33
  wire [34:0] cast_1_like_mant_frac_out1;  // ufix35_En33
  wire [1:0] alpha0_out1_1;  // ufix2
  wire [2:0] alpha0_out1_2;  // ufix3
  wire [33:0] Log2_E_out1;  // ufix34_En33
  wire [9:0] alpha2_out1;  // ufix10
  wire [33:0] Bit_Concat_out1_1;  // ufix34
  wire [33:0] Data_Type_Conversion_out1;  // ufix34_En33
  wire [33:0] Switch_out1;  // ufix34_En33
  wire [57:0] tmp1_1_66096404753625392914_mul_temp;  // ufix58_En56
  wire [34:0] tmp1_1_66096404753625392914_out1;  // ufix35_En33
  wire BitSlice_out1;  // ufix1
  wire [7:0] alpha1_out1;  // ufix8
  wire [31:0] exp_cor_1_add_temp;  // ufix32
  wire [31:0] exp_cor_1_1;  // ufix32
  wire [31:0] exp_cor_1_2;  // ufix32
  wire [7:0] exp_cor_1_out1;  // ufix8
  wire [7:0] if_bitget_tmp2_tmp2_WordLength_out1;  // ufix8
  wire [10:0] Bit_Concat_out1_2;  // ufix11
  wire signed [10:0] reinterpretcast_bitconcat_fi_0_out1;  // sfix11
  wire signed [10:0] cast_cfType_ExponentBias_lik_out1;  // sfix11
  wire signed [10:0] exp_tmp_cast_cfType_Exponent_out1;  // sfix11
  wire BitSlice_out1_1;  // ufix1
  wire [7:0] alpha3_out1;  // ufix8
  wire [33:0] BitSlice2_out1;  // ufix34
  wire [33:0] reinterpretcast_bitsliceget_t_out1;  // ufix34_En33
  wire [33:0] BitSlice1_out1;  // ufix34
  wire [33:0] reinterpretcast_bitsliceget_t_out1_1;  // ufix34_En33
  wire [33:0] if_bitget_tmp2_tmp2_WordLength_1_out1;  // ufix34_En33
  wire [41:0] Bit_Concat3_out1;  // ufix42
  wire [38:0] reinterpretcast_bitconcat_fi_0_out1_1;  // ufix39_En33
  wire [5:0] DTC2_out1;  // ufix6
  wire [7:0] dynamic_shift_cast;  // uint8
  wire [38:0] bitsll_tmp1_shift_length_out1;  // ufix39_En33
  wire [7:0] cast_cfType_ExponentBias_lik_out1_1;  // ufix8
  wire [7:0] cast_cfType_ExponentBias_lik_out1_2;  // ufix8
  wire [5:0] DTC1_out1;  // ufix6
  wire [7:0] dynamic_shift_cast_1;  // uint8
  wire [38:0] Shift_Arithmetic_out1;  // ufix39_En33
  wire [38:0] if_shift_sign_out1;  // ufix39_En33
  wire [32:0] BitSlice_out1_2;  // ufix33
  wire [34:0] Bit_Concat_out1_3;  // ufix35
  wire [34:0] reinterpretcast_bitconcat_fi_0_out1_2;  // ufix35_En33
  wire [34:0] cast_1_like_mant_frac_m_out1;  // ufix35_En33
  wire BitSlice1_out1_1;  // ufix1
  wire Logical_Operator_out1_1;  // ufix1
  wire [34:0] if_sticky_1_out1;  // ufix35_En33
  wire [34:0] Bit_Shift_out1;  // ufix35_En33
  wire signed [34:0] Data_Type_Conversion_out1_1;  // sfix35_En33
  wire BitSlice_out1_3;  // ufix1
  wire signed [34:0] Log2Table_1_out1;  // sfix35_En33
  wire signed [34:0] w_Log2Table_1_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1;  // sfix35_En33
  wire signed [34:0] bitsll_w_1_out1;  // sfix35_En33
  wire BitSlice1_out1_2;  // ufix1
  wire BitSlice_out1_4;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1;  // ufix1
  wire signed [34:0] Log2Table_int32_2_out1;  // sfix35_En33
  wire signed [34:0] Log2MinusTable_int32_2_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_0_out1;  // sfix35_En33
  wire signed [34:0] w_Log2MinusTable_int32_2_1_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1_1;  // sfix35_En33
  wire signed [34:0] bitsll_w_1_out1_1;  // sfix35_En33
  wire BitSlice1_out1_3;  // ufix1
  wire BitSlice_out1_5;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_1;  // ufix1
  wire signed [34:0] Log2Table_int32_3_out1;  // sfix35_En33
  wire signed [34:0] Log2MinusTable_int32_3_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_0_out1_1;  // sfix35_En33
  wire signed [34:0] w_Log2MinusTable_int32_2_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1_2;  // sfix35_En33
  wire signed [34:0] bitsll_w_1_out1_2;  // sfix35_En33
  wire BitSlice1_out1_4;  // ufix1
  wire BitSlice_out1_6;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_2;  // ufix1
  wire signed [34:0] Log2Table_int32_4_out1;  // sfix35_En33
  wire signed [34:0] Log2MinusTable_int32_4_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_0_out1_2;  // sfix35_En33
  wire signed [34:0] w_Log2MinusTable_int32_2_out1_1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1_3;  // sfix35_En33
  wire signed [34:0] bitsll_w_1_out1_3;  // sfix35_En33
  wire BitSlice1_out1_5;  // ufix1
  wire BitSlice_out1_7;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_3;  // ufix1
  wire signed [34:0] Log2Table_int32_5_out1;  // sfix35_En33
  wire signed [34:0] Log2MinusTable_int32_5_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_0_out1_3;  // sfix35_En33
  wire signed [34:0] w_Log2MinusTable_int32_2_out1_2;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1_4;  // sfix35_En33
  wire signed [34:0] bitsll_w_1_out1_4;  // sfix35_En33
  wire BitSlice1_out1_6;  // ufix1
  wire BitSlice_out1_8;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_4;  // ufix1
  wire signed [34:0] Log2Table_int32_6_out1;  // sfix35_En33
  wire signed [34:0] Log2MinusTable_int32_6_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_0_out1_4;  // sfix35_En33
  wire signed [34:0] w_Log2MinusTable_int32_2_out1_3;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1_5;  // sfix35_En33
  wire signed [34:0] bitsll_w_1_out1_5;  // sfix35_En33
  wire BitSlice1_out1_7;  // ufix1
  wire BitSlice_out1_9;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_5;  // ufix1
  wire signed [34:0] Log2Table_int32_7_out1;  // sfix35_En33
  wire signed [34:0] Log2MinusTable_int32_7_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_0_out1_5;  // sfix35_En33
  wire signed [34:0] w_Log2MinusTable_int32_2_out1_4;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1_6;  // sfix35_En33
  wire signed [34:0] bitsll_w_1_out1_6;  // sfix35_En33
  wire BitSlice1_out1_8;  // ufix1
  wire BitSlice_out1_10;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_6;  // ufix1
  wire signed [34:0] Log2Table_int32_8_out1;  // sfix35_En33
  wire signed [34:0] Log2MinusTable_int32_8_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_0_out1_6;  // sfix35_En33
  wire signed [34:0] w_Log2MinusTable_int32_2_out1_5;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1_7;  // sfix35_En33
  wire signed [34:0] bitsll_w_1_out1_7;  // sfix35_En33
  wire BitSlice1_out1_9;  // ufix1
  wire BitSlice_out1_11;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_7;  // ufix1
  wire signed [34:0] Log2Table_int32_9_out1;  // sfix35_En33
  wire signed [34:0] Log2MinusTable_int32_9_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_0_out1_7;  // sfix35_En33
  wire signed [34:0] w_Log2MinusTable_int32_2_out1_6;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1_8;  // sfix35_En33
  wire signed [34:0] bitsll_w_1_out1_8;  // sfix35_En33
  wire BitSlice1_out1_10;  // ufix1
  wire BitSlice_out1_12;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_8;  // ufix1
  wire signed [34:0] Log2Table_int32_10_out1;  // sfix35_En33
  wire signed [34:0] Log2MinusTable_int32_10_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_0_out1_8;  // sfix35_En33
  wire signed [34:0] w_Log2MinusTable_int32_2_out1_7;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1_9;  // sfix35_En33
  wire signed [34:0] bitsll_w_1_out1_9;  // sfix35_En33
  wire BitSlice1_out1_11;  // ufix1
  wire BitSlice_out1_13;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_9;  // ufix1
  wire signed [34:0] Log2Table_int32_11_out1;  // sfix35_En33
  wire signed [34:0] Log2MinusTable_int32_11_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_0_out1_9;  // sfix35_En33
  wire signed [34:0] w_Log2MinusTable_int32_2_out1_8;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1_10;  // sfix35_En33
  wire signed [34:0] bitsll_w_1_out1_10;  // sfix35_En33
  wire BitSlice1_out1_12;  // ufix1
  wire BitSlice_out1_14;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_10;  // ufix1
  wire signed [34:0] Log2Table_int32_12_out1;  // sfix35_En33
  wire signed [34:0] Log2MinusTable_int32_12_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_0_out1_10;  // sfix35_En33
  wire signed [34:0] w_Log2MinusTable_int32_2_out1_9;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1_11;  // sfix35_En33
  wire signed [34:0] bitsll_w_1_out1_11;  // sfix35_En33
  wire BitSlice1_out1_13;  // ufix1
  wire BitSlice_out1_15;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_11;  // ufix1
  wire signed [34:0] Log2Table_int32_13_out1;  // sfix35_En33
  wire signed [34:0] Log2MinusTable_int32_13_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_0_out1_11;  // sfix35_En33
  wire signed [34:0] w_Log2MinusTable_int32_2_out1_10;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1_12;  // sfix35_En33
  wire BitSlice1_out1_14;  // ufix1
  wire BitSlice_out1_16;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_12;  // ufix1
  wire signed [3:0] C1_out1;  // sfix4_En1
  wire signed [3:0] C_out1;  // sfix4_En1
  wire signed [3:0] if_bitget_w_w_WordLength_1_1_out1;  // sfix4_En1
  wire [1:0] Constant_out1_2;  // ufix2
  wire [5:0] Bit_Concat_out1_4;  // ufix6
  wire signed [5:0] dtc1_out1_1;  // sfix6_En3
  wire signed [5:0] bitsrl_y_int32_2_out1;  // sfix6_En3
  wire signed [5:0] y_tmp1_out1;  // sfix6_En3
  wire signed [5:0] y_tmp1_out1_1;  // sfix6_En3
  wire signed [5:0] if_bitget_w_w_WordLength_0_1_out1;  // sfix6_En3
  wire signed [5:0] if_bitget_w_w_WordLength_1_1_out1_1;  // sfix6_En3
  wire [2:0] Constant_out1_3;  // ufix3
  wire [8:0] Bit_Concat_out1_5;  // ufix9
  wire signed [8:0] dtc1_out1_2;  // sfix9_En6
  wire signed [8:0] bitsrl_y_int32_2_out1_1;  // sfix9_En6
  wire signed [8:0] y_tmp1_out1_2;  // sfix9_En6
  wire signed [8:0] y_tmp1_out1_3;  // sfix9_En6
  wire signed [8:0] if_bitget_w_w_WordLength_0_1_out1_1;  // sfix9_En6
  wire signed [8:0] if_bitget_w_w_WordLength_1_1_out1_2;  // sfix9_En6
  wire [3:0] Constant_out1_4;  // ufix4
  wire [12:0] Bit_Concat_out1_6;  // ufix13
  wire signed [12:0] dtc1_out1_3;  // sfix13_En10
  wire signed [12:0] bitsrl_y_int32_2_out1_2;  // sfix13_En10
  wire signed [12:0] y_tmp1_out1_4;  // sfix13_En10
  wire signed [12:0] y_tmp1_out1_5;  // sfix13_En10
  wire signed [12:0] if_bitget_w_w_WordLength_0_1_out1_2;  // sfix13_En10
  wire signed [12:0] if_bitget_w_w_WordLength_1_1_out1_3;  // sfix13_En10
  wire [4:0] Constant_out1_5;  // ufix5
  wire [17:0] Bit_Concat_out1_7;  // ufix18
  wire signed [17:0] dtc1_out1_4;  // sfix18_En15
  wire signed [17:0] bitsrl_y_int32_2_out1_3;  // sfix18_En15
  wire signed [17:0] y_tmp1_out1_6;  // sfix18_En15
  wire signed [17:0] y_tmp1_out1_7;  // sfix18_En15
  wire signed [17:0] if_bitget_w_w_WordLength_0_1_out1_3;  // sfix18_En15
  wire signed [17:0] if_bitget_w_w_WordLength_1_1_out1_4;  // sfix18_En15
  wire [5:0] Constant_out1_6;  // ufix6
  wire [23:0] Bit_Concat_out1_8;  // ufix24
  wire signed [23:0] dtc1_out1_5;  // sfix24_En21
  wire signed [23:0] bitsrl_y_int32_2_out1_4;  // sfix24_En21
  wire signed [23:0] y_tmp1_out1_8;  // sfix24_En21
  wire signed [23:0] y_tmp1_out1_9;  // sfix24_En21
  wire signed [23:0] if_bitget_w_w_WordLength_0_1_out1_4;  // sfix24_En21
  wire signed [23:0] if_bitget_w_w_WordLength_1_1_out1_5;  // sfix24_En21
  wire [6:0] Constant_out1_7;  // ufix7
  wire [30:0] Bit_Concat_out1_9;  // ufix31
  wire signed [30:0] dtc1_out1_6;  // sfix31_En28
  wire signed [30:0] bitsrl_y_int32_2_out1_5;  // sfix31_En28
  wire signed [30:0] y_tmp1_out1_10;  // sfix31_En28
  wire signed [30:0] y_tmp1_out1_11;  // sfix31_En28
  wire signed [30:0] if_bitget_w_w_WordLength_0_1_out1_5;  // sfix31_En28
  wire signed [30:0] if_bitget_w_w_WordLength_1_1_out1_6;  // sfix31_En28
  wire [4:0] Constant_out1_8;  // ufix5
  wire [35:0] Bit_Concat_out1_10;  // ufix36
  wire signed [35:0] dtc1_out1_7;  // sfix36_En33
  wire signed [35:0] bitsrl_y_int32_2_out1_6;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_12;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_13;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_0_1_out1_6;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_1_1_out1_7;  // sfix36_En33
  wire signed [35:0] bitsrl_y_int32_2_out1_7;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_14;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_15;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_0_1_out1_7;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_1_1_out1_8;  // sfix36_En33
  wire signed [35:0] bitsrl_y_int32_2_out1_8;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_16;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_17;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_0_1_out1_8;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_1_1_out1_9;  // sfix36_En33
  wire signed [35:0] bitsrl_y_int32_2_out1_9;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_18;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_19;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_0_1_out1_9;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_1_1_out1_10;  // sfix36_En33
  wire signed [35:0] bitsrl_y_int32_2_out1_10;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_20;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_21;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_0_1_out1_10;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_1_1_out1_11;  // sfix36_En33
  wire signed [35:0] bitsrl_y_int32_2_out1_11;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_22;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_23;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_0_1_out1_11;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_1_1_out1_12;  // sfix36_En33
  wire signed [35:0] bitsrl_y_int32_2_out1_12;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_24;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_25;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_0_1_out1_12;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_1_1_out1_13;  // sfix36_En33
  wire [1:0] alpha1_out1_1;  // ufix2
  wire [35:0] Bit_Concat1_out1;  // ufix36
  wire signed [35:0] reinterpretcast_bitconcat_fi_0_1_out1;  // sfix36_En33
  wire signed [35:0] Switch1_out1;  // sfix36_En33
  wire [22:0] Bit_Slice_out1;  // ufix23
  wire signed [22:0] Data_Type_Conversion_out1_2;  // sfix23_En21
  wire signed [22:0] Log2Table_int32_14_out1;  // sfix23_En21
  wire signed [22:0] Log2MinusTable_int32_14_out1;  // sfix23_En21
  wire signed [22:0] if_bitget_w_w_WordLength_0_out1_12;  // sfix23_En21
  wire signed [22:0] w_Log2MinusTable_int32_2_out1_11;  // sfix23_En21
  wire signed [22:0] if_bitget_w_w_WordLength_1_out1_13;  // sfix23_En21
  wire Constant5_out1;  // ufix1
  wire [21:0] Bit_Slice3_out1;  // ufix22
  wire [22:0] Bit_Concat3_out1_1;  // ufix23
  wire signed [22:0] Data_Type_Conversion3_out1;  // sfix23_En21
  wire signed [22:0] Switch4_out1_1;  // sfix23_En21
  wire signed [19:0] alpha0_693147182464600_out1;  // sfix20_En18
  wire signed [19:0] alpha0_33333_out1;  // sfix20_En18
  wire [19:0] Bit_Slice2_out1;  // ufix20
  wire signed [19:0] Data_Type_Conversion1_out1;  // sfix20_En18
  wire signed [19:0] Switch3_out1;  // sfix20_En18
  wire signed [42:0] tmp1_0_69314717873930931_mul_temp;  // sfix43_En39
  wire signed [22:0] tmp1_0_69314717873930931_out1;  // sfix23_En21
  wire signed [42:0] tmp2_y_mul_temp;  // sfix43_En39
  wire signed [20:0] tmp2_y_out1;  // sfix21_En19
  wire Bit_Slice1_out1;  // ufix1
  wire signed [14:0] Constant1_out1;  // sfix15
  wire signed [14:0] Constant_out1_9;  // sfix15
  wire signed [14:0] Switch_out1_1;  // sfix15
  wire signed [36:0] Unary_Minus_cast;  // sfix37_En33
  wire signed [36:0] Unary_Minus_cast_1;  // sfix37_En33
  wire signed [35:0] Unary_Minus_out1;  // sfix36_En33
  wire [35:0] Bit_Concat_out1_11;  // ufix36
  wire signed [35:0] DTC2_out1_1;  // sfix36_En33
  wire signed [35:0] y_tmp3_out1;  // sfix36_En33
  wire Bit_Slice4_out1;  // ufix1
  wire [13:0] Constant2_out1;  // ufix14
  wire [35:0] Bit_Concat1_out1_1;  // ufix36
  wire signed [35:0] DTC1_out1_8;  // sfix36_En33
  wire signed [35:0] Switch2_out1;  // sfix36_En33
  wire [1:0] alpha1_out1_2;  // ufix2
  wire [5:0] BitSlice2_out1_1;  // ufix6
  wire [7:0] Bit_Concat1_out1_2;  // ufix8
  wire [7:0] alpha127_1_out1;  // ufix8
  wire [7:0] alpha127_exp_tmp_out1;  // ufix8
  wire [7:0] if_sticky_4_out1;  // ufix8
  wire [7:0] cast_cfType_ExponentBias_lik_1_out1;  // ufix8
  wire [7:0] cast_cfType_ExponentBias_lik_1_out1_1;  // ufix8
  wire [7:0] cast_cfType_ExponentBias_lik_2_out1;  // ufix8
  wire [7:0] if_sticky_2_out1;  // ufix8
  wire signed [35:0] Shift_Arithmetic_out1_1;  // sfix36_En33
  wire signed [35:0] Add_out1;  // sfix36_En33
  wire Bit_Slice_out1_1;  // ufix1
  wire [6:0] Bit_Slice1_out1_1;  // ufix7
  wire Bit_Slice7_out1;  // ufix1
  wire Bit_Slice6_out1;  // ufix1
  wire Logical_Operator3_out1;  // ufix1
  wire Bit_Slice5_out1;  // ufix1
  wire Bit_Slice3_out1_1;  // ufix1
  wire Logical_Operator_out1_2;  // ufix1
  wire Bit_Slice2_out1_1;  // ufix1
  wire Bit_Slice1_out1_2;  // ufix1
  wire Bit_Slice_out1_2;  // ufix1
  wire signed [7:0] Start_out1;  // sfix8
  wire Logical_Operator4_out1;  // ufix1
  wire signed [7:0] Start_1_out1;  // sfix8
  wire signed [7:0] Switch_out1_2;  // sfix8
  wire signed [7:0] Start_2_out1;  // sfix8
  wire signed [7:0] Start_3_out1;  // sfix8
  wire Logical_Operator1_out1;  // ufix1
  wire signed [7:0] Switch2_out1_1;  // sfix8
  wire signed [7:0] Switch1_out1_1;  // sfix8
  wire signed [7:0] Start_4_out1;  // sfix8
  wire signed [7:0] Start_5_out1;  // sfix8
  wire signed [7:0] Switch5_out1;  // sfix8
  wire signed [7:0] Start_6_out1;  // sfix8
  wire signed [7:0] Start_7_out1;  // sfix8
  wire signed [7:0] Switch7_out1;  // sfix8
  wire signed [7:0] Switch6_out1;  // sfix8
  wire signed [7:0] Switch4_out1_2;  // sfix8
  wire [7:0] DTC_out1;  // ufix8
  wire signed [35:0] Shift_Arithmetic1_out1;  // sfix36_En33
  wire signed [35:0] Bit_Shift_out1_1;  // sfix36_En33
  wire signed [35:0] Switch_out1_3;  // sfix36_En33
  wire Bit_Slice1_out1_3;  // ufix1
  wire [36:0] Bit_Concat_out1_12;  // ufix37
  wire signed [36:0] Data_Type_Conversion_out1_3;  // sfix37_En33
  wire signed [35:0] Constant2_out1_1;  // sfix36_En33
  wire signed [35:0] Add1_out1;  // sfix36_En33
  wire Bit_Slice2_out1_2;  // ufix1
  wire [36:0] Bit_Concat1_out1_3;  // ufix37
  wire signed [36:0] Data_Type_Conversion1_out1_1;  // sfix37_En33
  wire signed [36:0] R_mant_b_norm_out1;  // sfix37_En33
  wire Bit_Slice_out1_3;  // ufix1
  wire signed [36:0] Bit_Shift_out1_2;  // sfix37_En33
  wire signed [36:0] R_mant_b_norm1_out1;  // sfix37_En33
  wire signed [36:0] Switch_out1_4;  // sfix37_En33
  wire signed [36:0] Bit_Shift2_out1;  // sfix37_En33
  wire signed [36:0] Add1_out1_1;  // sfix37_En33
  wire Bit_Slice1_out1_4;  // ufix1
  wire signed [36:0] Bit_Shift1_out1;  // sfix37_En33
  wire signed [36:0] Add_out1_1;  // sfix37_En33
  wire Bit_Slice_out1_4;  // ufix1
  wire Logical_Operator1_out1_1;  // ufix1
  wire Logical_Operator4_out1_1;  // ufix1
  wire signed [36:0] Bit_Shift_out1_3;  // sfix37_En33
  wire signed [36:0] Add_out1_2;  // sfix37_En33
  wire signed [36:0] Add2_out1;  // sfix37_En33
  wire Bit_Slice2_out1_3;  // ufix1
  wire Logical_Operator_out1_3;  // ufix1
  wire Logical_Operator2_out1;  // ufix1
  wire Logical_Operator3_out1_1;  // ufix1
  wire [2:0] Bit_Concat_out1_13;  // ufix3
  wire signed [36:0] Bit_Shift3_out1;  // sfix37_En33
  wire signed [36:0] Switch1_out1_2;  // sfix37_En33
  wire signed [36:0] Switch_out1_5;  // sfix37_En33
  wire signed [36:0] Switch2_out1_2;  // sfix37_En33
  wire signed [36:0] Bit_Shift2_out1_1;  // sfix37_En33
  wire signed [36:0] Add1_out1_2;  // sfix37_En33
  wire Bit_Slice1_out1_5;  // ufix1
  wire signed [36:0] Bit_Shift1_out1_1;  // sfix37_En33
  wire signed [36:0] Add_out1_3;  // sfix37_En33
  wire Bit_Slice_out1_5;  // ufix1
  wire Logical_Operator1_out1_2;  // ufix1
  wire Logical_Operator4_out1_2;  // ufix1
  wire signed [36:0] Add2_out1_1;  // sfix37_En33
  wire Bit_Slice2_out1_4;  // ufix1
  wire Logical_Operator_out1_4;  // ufix1
  wire Logical_Operator2_out1_1;  // ufix1
  wire Logical_Operator3_out1_2;  // ufix1
  wire [4:0] Bit_Concat_out1_14;  // ufix5
  wire signed [36:0] Bit_Shift3_out1_1;  // sfix37_En33
  wire signed [36:0] Switch1_out1_3;  // sfix37_En33
  wire signed [36:0] Switch_out1_6;  // sfix37_En33
  wire signed [36:0] Switch2_out1_3;  // sfix37_En33
  wire signed [36:0] Bit_Shift2_out1_2;  // sfix37_En33
  wire signed [36:0] Add1_out1_3;  // sfix37_En33
  wire Bit_Slice1_out1_6;  // ufix1
  wire signed [36:0] Bit_Shift1_out1_2;  // sfix37_En33
  wire signed [36:0] Add_out1_4;  // sfix37_En33
  wire Bit_Slice_out1_6;  // ufix1
  wire Logical_Operator1_out1_3;  // ufix1
  wire Logical_Operator4_out1_3;  // ufix1
  wire signed [36:0] Add2_out1_2;  // sfix37_En33
  wire Bit_Slice2_out1_5;  // ufix1
  wire Logical_Operator_out1_5;  // ufix1
  wire Logical_Operator2_out1_2;  // ufix1
  wire Logical_Operator3_out1_3;  // ufix1
  wire [6:0] Bit_Concat_out1_15;  // ufix7
  wire signed [36:0] Bit_Shift3_out1_2;  // sfix37_En33
  wire signed [36:0] Switch1_out1_4;  // sfix37_En33
  wire signed [36:0] Switch_out1_7;  // sfix37_En33
  wire signed [36:0] Switch2_out1_4;  // sfix37_En33
  wire signed [36:0] Bit_Shift2_out1_3;  // sfix37_En33
  wire signed [36:0] Add1_out1_4;  // sfix37_En33
  wire Bit_Slice1_out1_7;  // ufix1
  wire signed [36:0] Bit_Shift1_out1_3;  // sfix37_En33
  wire signed [36:0] Add_out1_5;  // sfix37_En33
  wire Bit_Slice_out1_7;  // ufix1
  wire Logical_Operator1_out1_4;  // ufix1
  wire Logical_Operator4_out1_4;  // ufix1
  wire signed [36:0] Add2_out1_3;  // sfix37_En33
  wire Bit_Slice2_out1_6;  // ufix1
  wire Logical_Operator_out1_6;  // ufix1
  wire Logical_Operator2_out1_3;  // ufix1
  wire Logical_Operator3_out1_4;  // ufix1
  wire [8:0] Bit_Concat_out1_16;  // ufix9
  wire signed [36:0] Bit_Shift3_out1_3;  // sfix37_En33
  wire signed [36:0] Switch1_out1_5;  // sfix37_En33
  wire signed [36:0] Switch_out1_8;  // sfix37_En33
  wire signed [36:0] Switch2_out1_5;  // sfix37_En33
  wire signed [36:0] Bit_Shift2_out1_4;  // sfix37_En33
  wire signed [36:0] Add1_out1_5;  // sfix37_En33
  wire Bit_Slice1_out1_8;  // ufix1
  wire signed [36:0] Bit_Shift1_out1_4;  // sfix37_En33
  wire signed [36:0] Add_out1_6;  // sfix37_En33
  wire Bit_Slice_out1_8;  // ufix1
  wire Logical_Operator1_out1_5;  // ufix1
  wire Logical_Operator4_out1_5;  // ufix1
  wire signed [36:0] Add2_out1_4;  // sfix37_En33
  wire Bit_Slice2_out1_7;  // ufix1
  wire Logical_Operator_out1_7;  // ufix1
  wire Logical_Operator2_out1_4;  // ufix1
  wire Logical_Operator3_out1_5;  // ufix1
  wire [10:0] Bit_Concat_out1_17;  // ufix11
  wire signed [36:0] Bit_Shift3_out1_4;  // sfix37_En33
  wire signed [36:0] Switch1_out1_6;  // sfix37_En33
  wire signed [36:0] Switch_out1_9;  // sfix37_En33
  wire signed [36:0] Switch2_out1_6;  // sfix37_En33
  wire signed [36:0] Bit_Shift2_out1_5;  // sfix37_En33
  wire signed [36:0] Add1_out1_6;  // sfix37_En33
  wire Bit_Slice1_out1_9;  // ufix1
  wire signed [36:0] Bit_Shift1_out1_5;  // sfix37_En33
  wire signed [36:0] Add_out1_7;  // sfix37_En33
  wire Bit_Slice_out1_9;  // ufix1
  wire Logical_Operator1_out1_6;  // ufix1
  wire Logical_Operator4_out1_6;  // ufix1
  wire signed [36:0] Add2_out1_5;  // sfix37_En33
  wire Bit_Slice2_out1_8;  // ufix1
  wire Logical_Operator_out1_8;  // ufix1
  wire Logical_Operator2_out1_5;  // ufix1
  wire Logical_Operator3_out1_6;  // ufix1
  wire [12:0] Bit_Concat_out1_18;  // ufix13
  wire signed [36:0] Bit_Shift3_out1_5;  // sfix37_En33
  wire signed [36:0] Switch1_out1_7;  // sfix37_En33
  wire signed [36:0] Switch_out1_10;  // sfix37_En33
  wire signed [36:0] Switch2_out1_7;  // sfix37_En33
  wire signed [36:0] Bit_Shift2_out1_6;  // sfix37_En33
  wire signed [36:0] Add1_out1_7;  // sfix37_En33
  wire Bit_Slice1_out1_10;  // ufix1
  wire signed [36:0] Bit_Shift1_out1_6;  // sfix37_En33
  wire signed [36:0] Add_out1_8;  // sfix37_En33
  wire Bit_Slice_out1_10;  // ufix1
  wire Logical_Operator1_out1_7;  // ufix1
  wire Logical_Operator4_out1_7;  // ufix1
  wire signed [36:0] Add2_out1_6;  // sfix37_En33
  wire Bit_Slice2_out1_9;  // ufix1
  wire Logical_Operator_out1_9;  // ufix1
  wire Logical_Operator2_out1_6;  // ufix1
  wire Logical_Operator3_out1_7;  // ufix1
  wire [14:0] Bit_Concat_out1_19;  // ufix15
  wire signed [36:0] Bit_Shift3_out1_6;  // sfix37_En33
  wire signed [36:0] Switch1_out1_8;  // sfix37_En33
  wire signed [36:0] Switch_out1_11;  // sfix37_En33
  wire signed [36:0] Switch2_out1_8;  // sfix37_En33
  wire signed [36:0] Bit_Shift2_out1_7;  // sfix37_En33
  wire signed [36:0] Add1_out1_8;  // sfix37_En33
  wire Bit_Slice1_out1_11;  // ufix1
  wire signed [36:0] Bit_Shift1_out1_7;  // sfix37_En33
  wire signed [36:0] Add_out1_9;  // sfix37_En33
  wire Bit_Slice_out1_11;  // ufix1
  wire Logical_Operator1_out1_8;  // ufix1
  wire Logical_Operator4_out1_8;  // ufix1
  wire signed [36:0] Add2_out1_7;  // sfix37_En33
  wire Bit_Slice2_out1_10;  // ufix1
  wire Logical_Operator_out1_10;  // ufix1
  wire Logical_Operator2_out1_7;  // ufix1
  wire Logical_Operator3_out1_8;  // ufix1
  wire [16:0] Bit_Concat_out1_20;  // ufix17
  wire signed [36:0] Bit_Shift3_out1_7;  // sfix37_En33
  wire signed [36:0] Switch1_out1_9;  // sfix37_En33
  wire signed [36:0] Switch_out1_12;  // sfix37_En33
  wire signed [36:0] Switch2_out1_9;  // sfix37_En33
  wire signed [36:0] Bit_Shift2_out1_8;  // sfix37_En33
  wire signed [36:0] Add1_out1_9;  // sfix37_En33
  wire Bit_Slice1_out1_12;  // ufix1
  wire signed [36:0] Bit_Shift1_out1_8;  // sfix37_En33
  wire signed [36:0] Add_out1_10;  // sfix37_En33
  wire Bit_Slice_out1_12;  // ufix1
  wire Logical_Operator1_out1_9;  // ufix1
  wire Logical_Operator4_out1_9;  // ufix1
  wire signed [36:0] Add2_out1_8;  // sfix37_En33
  wire Bit_Slice2_out1_11;  // ufix1
  wire Logical_Operator_out1_11;  // ufix1
  wire Logical_Operator2_out1_8;  // ufix1
  wire Logical_Operator3_out1_9;  // ufix1
  wire [18:0] Bit_Concat_out1_21;  // ufix19
  wire signed [36:0] Bit_Shift3_out1_8;  // sfix37_En33
  wire signed [36:0] Switch1_out1_10;  // sfix37_En33
  wire signed [36:0] Switch_out1_13;  // sfix37_En33
  wire signed [36:0] Switch2_out1_10;  // sfix37_En33
  wire signed [36:0] Bit_Shift2_out1_9;  // sfix37_En33
  wire signed [36:0] Add1_out1_10;  // sfix37_En33
  wire Bit_Slice1_out1_13;  // ufix1
  wire signed [36:0] Bit_Shift1_out1_9;  // sfix37_En33
  wire signed [36:0] Add_out1_11;  // sfix37_En33
  wire Bit_Slice_out1_13;  // ufix1
  wire Logical_Operator1_out1_10;  // ufix1
  wire Logical_Operator4_out1_10;  // ufix1
  wire signed [36:0] Add2_out1_9;  // sfix37_En33
  wire Bit_Slice2_out1_12;  // ufix1
  wire Logical_Operator_out1_12;  // ufix1
  wire Logical_Operator2_out1_9;  // ufix1
  wire Logical_Operator3_out1_10;  // ufix1
  wire [20:0] Bit_Concat_out1_22;  // ufix21
  wire signed [36:0] Bit_Shift3_out1_9;  // sfix37_En33
  wire signed [36:0] Switch1_out1_11;  // sfix37_En33
  wire signed [36:0] Switch_out1_14;  // sfix37_En33
  wire signed [36:0] Switch2_out1_11;  // sfix37_En33
  wire signed [36:0] Bit_Shift2_out1_10;  // sfix37_En33
  wire signed [36:0] Add1_out1_11;  // sfix37_En33
  wire Bit_Slice1_out1_14;  // ufix1
  wire signed [36:0] Bit_Shift1_out1_10;  // sfix37_En33
  wire signed [36:0] Add_out1_12;  // sfix37_En33
  wire Bit_Slice_out1_14;  // ufix1
  wire Logical_Operator1_out1_11;  // ufix1
  wire Logical_Operator4_out1_11;  // ufix1
  wire signed [36:0] Add2_out1_10;  // sfix37_En33
  wire Bit_Slice2_out1_13;  // ufix1
  wire Logical_Operator_out1_13;  // ufix1
  wire Logical_Operator2_out1_10;  // ufix1
  wire Logical_Operator3_out1_11;  // ufix1
  wire [22:0] Bit_Concat_out1_23;  // ufix23
  wire signed [36:0] Bit_Shift3_out1_10;  // sfix37_En33
  wire signed [36:0] Switch1_out1_12;  // sfix37_En33
  wire signed [36:0] Switch_out1_15;  // sfix37_En33
  wire signed [36:0] Switch2_out1_12;  // sfix37_En33
  wire signed [36:0] Bit_Shift2_out1_11;  // sfix37_En33
  wire signed [36:0] Add1_out1_12;  // sfix37_En33
  wire Bit_Slice1_out1_15;  // ufix1
  wire signed [36:0] Bit_Shift1_out1_11;  // sfix37_En33
  wire signed [36:0] Add_out1_13;  // sfix37_En33
  wire Bit_Slice_out1_15;  // ufix1
  wire Logical_Operator1_out1_12;  // ufix1
  wire Logical_Operator_out1_14;  // ufix1
  wire Logical_Operator4_out1_12;  // ufix1
  wire signed [36:0] Add2_out1_11;  // sfix37_En33
  wire Bit_Slice2_out1_14;  // ufix1
  wire Logical_Operator2_out1_11;  // ufix1
  wire Logical_Operator3_out1_12;  // ufix1
  wire [24:0] Bit_Concat_out1_24;  // ufix25
  wire [23:0] Bit_Slice_out1_16;  // ufix24
  wire [23:0] Bit_Slice_out1_17;  // ufix24
  wire [23:0] Switch1_out1_13;  // ufix24
  wire [24:0] Bit_Concat_out1_25;  // ufix25
  wire BitSlice1_out1_15;  // ufix1
  wire BitSlice_out1_17;  // ufix1
  wire Logical_Operator1_out1_13;  // ufix1
  wire alphabitget_Mant_tmp_2_0_out1;  // ufix1
  wire alphabitget_Mant_tmp_1_0_out1;  // ufix1
  wire [24:0] cast_2_like_Mant_tmp_out1;  // ufix25
  wire [31:0] Mant_tmp_cast_2_like_Man_add_temp;  // ufix32
  wire [31:0] Mant_tmp_cast_2_like_Man_1;  // ufix32
  wire [31:0] Mant_tmp_cast_2_like_Man_2;  // ufix32
  wire [24:0] Mant_tmp_cast_2_like_Man_out1;  // ufix25
  wire [24:0] if_bitget_Mant_tmp_1_0_out1;  // ufix25
  wire BitSlice2_out1_2;  // ufix1
  wire [7:0] alpha127_out1;  // ufix8
  wire [7:0] if_sticky_3_out1;  // ufix8
  wire [7:0] Add3_out1;  // ufix8
  wire [7:0] Constant1_out1_1;  // ufix8
  wire [7:0] Add2_out1_12;  // ufix8
  wire [7:0] Switch1_out1_14;  // ufix8
  wire [7:0] Constant1_out1_2;  // ufix8
  wire [7:0] exp_1_out1;  // ufix8
  wire [7:0] Switch1_out1_15;  // ufix8
  wire [7:0] Switch_out1_16;  // ufix8
  wire [7:0] cast_1_like_Exp_out1;  // ufix8
  wire [7:0] Exp_cast_1_like_Exp_out1;  // ufix8
  wire [7:0] if_bitget_Mant_tmp_Mant_tmp_Wor_out1;  // ufix8
  wire aExponent_cfType_Exponent_I_out1;  // ufix1
  wire aMantissa_0_out1;  // ufix1
  wire Logical_Operator2_out1_12;  // ufix1
  wire Logical_Operator1_out1_14;  // ufix1
  wire [7:0] Constant_out1_10;  // ufix8
  wire [7:0] Switch_out1_17;  // ufix8
  wire [7:0] if_aExponent_cfType_Exponent_out1;  // ufix8
  wire [22:0] BitSlice3_out1;  // ufix23
  wire [22:0] C_out1_1;  // ufix23
  wire [22:0] if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1;  // ufix23
  wire [22:0] Constant1_out1_3;  // ufix23
  wire [22:0] Switch1_out1_16;  // ufix23
  wire [22:0] if_aExponent_cfType_Exponent_1_out1;  // ufix23
  wire [31:0] nfp_out_pack;  // ufix32


  // Split 32 bit word into FP sign, exponent, mantissa
  assign aSign = nfp_in[31];
  assign aExponent = nfp_in[30:23];
  assign aMantissa = nfp_in[22:0];



  assign aExponent_cfType_Exponent_I_1_out1 = aExponent < 8'b01110011;



  assign aExponent_cfType_Exponent_I_2_out1 = aExponent > 8'b10000010;



  assign Logical_Operator_out1 = aExponent_cfType_Exponent_I_1_out1 | aExponent_cfType_Exponent_I_2_out1;



  assign alpha0_out1 = 1'b0;



  assign alpha127_6_out1 = aExponent < 8'b01111001;



  assign Constant_out1 = 1'b1;



  assign Constant3_out1 = 36'sh200000000;



  assign Constant3_out1_1 = 2'b00;



  assign Constant_out1_1 = 1'b1;



  assign Bit_Concat_out1 = {Constant_out1_1, aMantissa};



  assign reinterpretcast_mant_cor_nume_out1 = Bit_Concat_out1;



  assign Constant4_out1 = 10'b0000000000;



  assign Bit_Concat2_out1 = {Constant3_out1_1, reinterpretcast_mant_cor_nume_out1, Constant4_out1};



  assign Data_Type_Conversion2_out1 = Bit_Concat2_out1;



  assign Switch4_out1 = (alpha127_6_out1 == 1'b0 ? Constant3_out1 :
              Data_Type_Conversion2_out1);



  assign cast_1_like_mant_frac_out1 = 35'h200000000;



  assign alpha0_out1_1 = 2'b00;



  assign alpha0_out1_2 = 3'b000;



  assign Log2_E_out1 = 34'h2E2A8ECA5;



  assign alpha2_out1 = 10'b0000000000;



  assign Bit_Concat_out1_1 = {reinterpretcast_mant_cor_nume_out1, alpha2_out1};



  assign Data_Type_Conversion_out1 = Bit_Concat_out1_1;



  assign Switch_out1 = (alpha127_6_out1 == 1'b0 ? Log2_E_out1 :
              Data_Type_Conversion_out1);



  assign tmp1_1_66096404753625392914_mul_temp = reinterpretcast_mant_cor_nume_out1 * Switch_out1;
  assign tmp1_1_66096404753625392914_out1 = tmp1_1_66096404753625392914_mul_temp[57:23];



  assign BitSlice_out1 = tmp1_1_66096404753625392914_out1[34];



  assign alpha1_out1 = 8'b00000001;



  assign exp_cor_1_1 = {24'b0, aExponent};
  assign exp_cor_1_2 = {24'b0, alpha1_out1};
  assign exp_cor_1_add_temp = exp_cor_1_1 + exp_cor_1_2;
  assign exp_cor_1_out1 = (exp_cor_1_add_temp[31:8] != 24'b000000000000000000000000 ? 8'b11111111 :
              exp_cor_1_add_temp[7:0]);



  assign if_bitget_tmp2_tmp2_WordLength_out1 = (BitSlice_out1 == 1'b0 ? aExponent :
              exp_cor_1_out1);



  assign Bit_Concat_out1_2 = {alpha0_out1_2, if_bitget_tmp2_tmp2_WordLength_out1};



  assign reinterpretcast_bitconcat_fi_0_out1 = Bit_Concat_out1_2;



  assign cast_cfType_ExponentBias_lik_out1 = 11'sb11110000010;



  assign exp_tmp_cast_cfType_Exponent_out1 = reinterpretcast_bitconcat_fi_0_out1 + cast_cfType_ExponentBias_lik_out1;



  assign BitSlice_out1_1 = exp_tmp_cast_cfType_Exponent_out1[10];



  assign alpha3_out1 = 8'b00000000;



  assign BitSlice2_out1 = tmp1_1_66096404753625392914_out1[33:0];



  assign reinterpretcast_bitsliceget_t_out1 = BitSlice2_out1;



  assign BitSlice1_out1 = tmp1_1_66096404753625392914_out1[34:1];



  assign reinterpretcast_bitsliceget_t_out1_1 = BitSlice1_out1;



  assign if_bitget_tmp2_tmp2_WordLength_1_out1 = (BitSlice_out1 == 1'b0 ? reinterpretcast_bitsliceget_t_out1 :
              reinterpretcast_bitsliceget_t_out1_1);



  assign Bit_Concat3_out1 = {alpha3_out1, if_bitget_tmp2_tmp2_WordLength_1_out1};



  assign reinterpretcast_bitconcat_fi_0_out1_1 = Bit_Concat3_out1[38:0];



  assign DTC2_out1 = ((exp_tmp_cast_cfType_Exponent_out1[10] == 1'b0) && (exp_tmp_cast_cfType_Exponent_out1[9:6] != 4'b0000) ? 6'b111111 :
              (exp_tmp_cast_cfType_Exponent_out1[10] == 1'b1 ? 6'b000000 :
              exp_tmp_cast_cfType_Exponent_out1[5:0]));



  assign dynamic_shift_cast = {2'b0, DTC2_out1};
  assign bitsll_tmp1_shift_length_out1 = reinterpretcast_bitconcat_fi_0_out1_1 <<< dynamic_shift_cast;



  assign cast_cfType_ExponentBias_lik_out1_1 = 8'b01111110;



  assign cast_cfType_ExponentBias_lik_out1_2 = cast_cfType_ExponentBias_lik_out1_1 - if_bitget_tmp2_tmp2_WordLength_out1;



  assign DTC1_out1 = (cast_cfType_ExponentBias_lik_out1_2[7:6] != 2'b00 ? 6'b111111 :
              cast_cfType_ExponentBias_lik_out1_2[5:0]);



  assign dynamic_shift_cast_1 = {2'b0, DTC1_out1};
  assign Shift_Arithmetic_out1 = reinterpretcast_bitconcat_fi_0_out1_1 >>> dynamic_shift_cast_1;



  assign if_shift_sign_out1 = (BitSlice_out1_1 == 1'b0 ? bitsll_tmp1_shift_length_out1 :
              Shift_Arithmetic_out1);



  assign BitSlice_out1_2 = if_shift_sign_out1[32:0];



  assign Bit_Concat_out1_3 = {alpha0_out1_1, BitSlice_out1_2};



  assign reinterpretcast_bitconcat_fi_0_out1_2 = Bit_Concat_out1_3;



  assign cast_1_like_mant_frac_m_out1 = cast_1_like_mant_frac_out1 - reinterpretcast_bitconcat_fi_0_out1_2;



  assign BitSlice1_out1_1 = cast_1_like_mant_frac_m_out1[33];



  assign Logical_Operator_out1_1 =  ~ BitSlice1_out1_1;



  assign if_sticky_1_out1 = (Logical_Operator_out1_1 == 1'b0 ? reinterpretcast_bitconcat_fi_0_out1_2 :
              cast_1_like_mant_frac_m_out1);



  assign Bit_Shift_out1 = if_sticky_1_out1 <<< 8'd1;



  assign Data_Type_Conversion_out1_1 = Bit_Shift_out1;



  assign BitSlice_out1_3 = Data_Type_Conversion_out1_1[33];



  assign Log2Table_1_out1 = 35'sh5A8FF9718;



  assign w_Log2Table_1_out1 = Data_Type_Conversion_out1_1 + Log2Table_1_out1;



  assign if_bitget_w_w_WordLength_1_out1 = (BitSlice_out1_3 == 1'b0 ? Data_Type_Conversion_out1_1 :
              w_Log2Table_1_out1);



  assign bitsll_w_1_out1 = if_bitget_w_w_WordLength_1_out1 <<< 8'd1;



  assign BitSlice1_out1_2 = bitsll_w_1_out1[33];



  assign BitSlice_out1_4 = bitsll_w_1_out1[34];



  assign alphabitget_w_w_WordLength_1_out1 = BitSlice1_out1_2 ^ BitSlice_out1_4;



  assign Log2Table_int32_2_out1 = 35'sh56CB0F687;



  assign Log2MinusTable_int32_2_out1 = 35'sh351FF2E30;



  assign if_bitget_w_w_WordLength_0_out1 = (BitSlice_out1_4 == 1'b0 ? Log2Table_int32_2_out1 :
              Log2MinusTable_int32_2_out1);



  assign w_Log2MinusTable_int32_2_1_out1 = bitsll_w_1_out1 + if_bitget_w_w_WordLength_0_out1;



  assign if_bitget_w_w_WordLength_1_out1_1 = (alphabitget_w_w_WordLength_1_out1 == 1'b0 ? bitsll_w_1_out1 :
              w_Log2MinusTable_int32_2_1_out1);



  assign bitsll_w_1_out1_1 = if_bitget_w_w_WordLength_1_out1_1 <<< 8'd1;



  assign BitSlice1_out1_3 = bitsll_w_1_out1_1[33];



  assign BitSlice_out1_5 = bitsll_w_1_out1_1[34];



  assign alphabitget_w_w_WordLength_1_out1_1 = BitSlice1_out1_3 ^ BitSlice_out1_5;



  assign Log2Table_int32_3_out1 = 35'sh547FCB8C1;



  assign Log2MinusTable_int32_3_out1 = 35'sh315130158;



  assign if_bitget_w_w_WordLength_0_out1_1 = (BitSlice_out1_5 == 1'b0 ? Log2Table_int32_3_out1 :
              Log2MinusTable_int32_3_out1);



  assign w_Log2MinusTable_int32_2_out1 = bitsll_w_1_out1_1 + if_bitget_w_w_WordLength_0_out1_1;



  assign if_bitget_w_w_WordLength_1_out1_2 = (alphabitget_w_w_WordLength_1_out1_1 == 1'b0 ? bitsll_w_1_out1_1 :
              w_Log2MinusTable_int32_2_out1);



  assign bitsll_w_1_out1_2 = if_bitget_w_w_WordLength_1_out1_2 <<< 8'd1;



  assign BitSlice1_out1_4 = bitsll_w_1_out1_2[33];



  assign BitSlice_out1_6 = bitsll_w_1_out1_2[34];



  assign alphabitget_w_w_WordLength_1_out1_2 = BitSlice1_out1_4 ^ BitSlice_out1_6;



  assign Log2Table_int32_4_out1 = 35'sh5338120A7;



  assign Log2MinusTable_int32_4_out1 = 35'sh2FAC092DA;



  assign if_bitget_w_w_WordLength_0_out1_2 = (BitSlice_out1_6 == 1'b0 ? Log2Table_int32_4_out1 :
              Log2MinusTable_int32_4_out1);



  assign w_Log2MinusTable_int32_2_out1_1 = bitsll_w_1_out1_2 + if_bitget_w_w_WordLength_0_out1_2;



  assign if_bitget_w_w_WordLength_1_out1_3 = (alphabitget_w_w_WordLength_1_out1_2 == 1'b0 ? bitsll_w_1_out1_2 :
              w_Log2MinusTable_int32_2_out1_1);



  assign bitsll_w_1_out1_3 = if_bitget_w_w_WordLength_1_out1_3 <<< 8'd1;



  assign BitSlice1_out1_5 = bitsll_w_1_out1_3[33];



  assign BitSlice_out1_7 = bitsll_w_1_out1_3[34];



  assign alphabitget_w_w_WordLength_1_out1_3 = BitSlice1_out1_5 ^ BitSlice_out1_7;



  assign Log2Table_int32_5_out1 = 35'sh528A5914E;



  assign Log2MinusTable_int32_5_out1 = 35'sh2EE72993B;



  assign if_bitget_w_w_WordLength_0_out1_3 = (BitSlice_out1_7 == 1'b0 ? Log2Table_int32_5_out1 :
              Log2MinusTable_int32_5_out1);



  assign w_Log2MinusTable_int32_2_out1_2 = bitsll_w_1_out1_3 + if_bitget_w_w_WordLength_0_out1_3;



  assign if_bitget_w_w_WordLength_1_out1_4 = (alphabitget_w_w_WordLength_1_out1_3 == 1'b0 ? bitsll_w_1_out1_3 :
              w_Log2MinusTable_int32_2_out1_2);



  assign bitsll_w_1_out1_4 = if_bitget_w_w_WordLength_1_out1_4 <<< 8'd1;



  assign BitSlice1_out1_6 = bitsll_w_1_out1_4[33];



  assign BitSlice_out1_8 = bitsll_w_1_out1_4[34];



  assign alphabitget_w_w_WordLength_1_out1_4 = BitSlice1_out1_6 ^ BitSlice_out1_8;



  assign Log2Table_int32_6_out1 = 35'sh5230D2F48;



  assign Log2MinusTable_int32_6_out1 = 35'sh2E87DD0C4;



  assign if_bitget_w_w_WordLength_0_out1_4 = (BitSlice_out1_8 == 1'b0 ? Log2Table_int32_6_out1 :
              Log2MinusTable_int32_6_out1);



  assign w_Log2MinusTable_int32_2_out1_3 = bitsll_w_1_out1_4 + if_bitget_w_w_WordLength_0_out1_4;



  assign if_bitget_w_w_WordLength_1_out1_5 = (alphabitget_w_w_WordLength_1_out1_4 == 1'b0 ? bitsll_w_1_out1_4 :
              w_Log2MinusTable_int32_2_out1_3);



  assign bitsll_w_1_out1_5 = if_bitget_w_w_WordLength_1_out1_5 <<< 8'd1;



  assign BitSlice1_out1_7 = bitsll_w_1_out1_5[33];



  assign BitSlice_out1_9 = bitsll_w_1_out1_5[34];



  assign alphabitget_w_w_WordLength_1_out1_5 = BitSlice1_out1_7 ^ BitSlice_out1_9;



  assign Log2Table_int32_7_out1 = 35'sh52035E922;



  assign Log2MinusTable_int32_7_out1 = 35'sh2E58F7442;



  assign if_bitget_w_w_WordLength_0_out1_5 = (BitSlice_out1_9 == 1'b0 ? Log2Table_int32_7_out1 :
              Log2MinusTable_int32_7_out1);



  assign w_Log2MinusTable_int32_2_out1_4 = bitsll_w_1_out1_5 + if_bitget_w_w_WordLength_0_out1_5;



  assign if_bitget_w_w_WordLength_1_out1_6 = (alphabitget_w_w_WordLength_1_out1_5 == 1'b0 ? bitsll_w_1_out1_5 :
              w_Log2MinusTable_int32_2_out1_4);



  assign bitsll_w_1_out1_6 = if_bitget_w_w_WordLength_1_out1_6 <<< 8'd1;



  assign BitSlice1_out1_8 = bitsll_w_1_out1_6[33];



  assign BitSlice_out1_10 = bitsll_w_1_out1_6[34];



  assign alphabitget_w_w_WordLength_1_out1_6 = BitSlice1_out1_8 ^ BitSlice_out1_10;



  assign Log2Table_int32_8_out1 = 35'sh51EC77251;



  assign Log2MinusTable_int32_8_out1 = 35'sh2E41B380E;



  assign if_bitget_w_w_WordLength_0_out1_6 = (BitSlice_out1_10 == 1'b0 ? Log2Table_int32_8_out1 :
              Log2MinusTable_int32_8_out1);



  assign w_Log2MinusTable_int32_2_out1_5 = bitsll_w_1_out1_6 + if_bitget_w_w_WordLength_0_out1_6;



  assign if_bitget_w_w_WordLength_1_out1_7 = (alphabitget_w_w_WordLength_1_out1_6 == 1'b0 ? bitsll_w_1_out1_6 :
              w_Log2MinusTable_int32_2_out1_5);



  assign bitsll_w_1_out1_7 = if_bitget_w_w_WordLength_1_out1_7 <<< 8'd1;



  assign BitSlice1_out1_9 = bitsll_w_1_out1_7[33];



  assign BitSlice_out1_11 = bitsll_w_1_out1_7[34];



  assign alphabitget_w_w_WordLength_1_out1_7 = BitSlice1_out1_9 ^ BitSlice_out1_11;



  assign Log2Table_int32_9_out1 = 35'sh51E0F801F;



  assign Log2MinusTable_int32_9_out1 = 35'sh2E361D486;



  assign if_bitget_w_w_WordLength_0_out1_7 = (BitSlice_out1_11 == 1'b0 ? Log2Table_int32_9_out1 :
              Log2MinusTable_int32_9_out1);



  assign w_Log2MinusTable_int32_2_out1_6 = bitsll_w_1_out1_7 + if_bitget_w_w_WordLength_0_out1_7;



  assign if_bitget_w_w_WordLength_1_out1_8 = (alphabitget_w_w_WordLength_1_out1_7 == 1'b0 ? bitsll_w_1_out1_7 :
              w_Log2MinusTable_int32_2_out1_6);



  assign bitsll_w_1_out1_8 = if_bitget_w_w_WordLength_1_out1_8 <<< 8'd1;



  assign BitSlice1_out1_10 = bitsll_w_1_out1_8[33];



  assign BitSlice_out1_12 = bitsll_w_1_out1_8[34];



  assign alphabitget_w_w_WordLength_1_out1_8 = BitSlice1_out1_10 ^ BitSlice_out1_12;



  assign Log2Table_int32_10_out1 = 35'sh51DB35918;



  assign Log2MinusTable_int32_10_out1 = 35'sh2E305512A;



  assign if_bitget_w_w_WordLength_0_out1_8 = (BitSlice_out1_12 == 1'b0 ? Log2Table_int32_10_out1 :
              Log2MinusTable_int32_10_out1);



  assign w_Log2MinusTable_int32_2_out1_7 = bitsll_w_1_out1_8 + if_bitget_w_w_WordLength_0_out1_8;



  assign if_bitget_w_w_WordLength_1_out1_9 = (alphabitget_w_w_WordLength_1_out1_8 == 1'b0 ? bitsll_w_1_out1_8 :
              w_Log2MinusTable_int32_2_out1_7);



  assign bitsll_w_1_out1_9 = if_bitget_w_w_WordLength_1_out1_9 <<< 8'd1;



  assign BitSlice1_out1_11 = bitsll_w_1_out1_9[33];



  assign BitSlice_out1_13 = bitsll_w_1_out1_9[34];



  assign alphabitget_w_w_WordLength_1_out1_9 = BitSlice1_out1_11 ^ BitSlice_out1_13;



  assign Log2Table_int32_11_out1 = 35'sh51D853A11;



  assign Log2MinusTable_int32_11_out1 = 35'sh2E2D71B0E;



  assign if_bitget_w_w_WordLength_0_out1_9 = (BitSlice_out1_13 == 1'b0 ? Log2Table_int32_11_out1 :
              Log2MinusTable_int32_11_out1);



  assign w_Log2MinusTable_int32_2_out1_8 = bitsll_w_1_out1_9 + if_bitget_w_w_WordLength_0_out1_9;



  assign if_bitget_w_w_WordLength_1_out1_10 = (alphabitget_w_w_WordLength_1_out1_9 == 1'b0 ? bitsll_w_1_out1_9 :
              w_Log2MinusTable_int32_2_out1_8);



  assign bitsll_w_1_out1_10 = if_bitget_w_w_WordLength_1_out1_10 <<< 8'd1;



  assign BitSlice1_out1_12 = bitsll_w_1_out1_10[33];



  assign BitSlice_out1_14 = bitsll_w_1_out1_10[34];



  assign alphabitget_w_w_WordLength_1_out1_10 = BitSlice1_out1_12 ^ BitSlice_out1_14;



  assign Log2Table_int32_12_out1 = 35'sh51D6E27AC;



  assign Log2MinusTable_int32_12_out1 = 35'sh2E2C002E3;



  assign if_bitget_w_w_WordLength_0_out1_10 = (BitSlice_out1_14 == 1'b0 ? Log2Table_int32_12_out1 :
              Log2MinusTable_int32_12_out1);



  assign w_Log2MinusTable_int32_2_out1_9 = bitsll_w_1_out1_10 + if_bitget_w_w_WordLength_0_out1_10;



  assign if_bitget_w_w_WordLength_1_out1_11 = (alphabitget_w_w_WordLength_1_out1_10 == 1'b0 ? bitsll_w_1_out1_10 :
              w_Log2MinusTable_int32_2_out1_9);



  assign bitsll_w_1_out1_11 = if_bitget_w_w_WordLength_1_out1_11 <<< 8'd1;



  assign BitSlice1_out1_13 = bitsll_w_1_out1_11[33];



  assign BitSlice_out1_15 = bitsll_w_1_out1_11[34];



  assign alphabitget_w_w_WordLength_1_out1_11 = BitSlice1_out1_13 ^ BitSlice_out1_15;



  assign Log2Table_int32_13_out1 = 35'sh51D629DC1;



  assign Log2MinusTable_int32_13_out1 = 35'sh2E2B47787;



  assign if_bitget_w_w_WordLength_0_out1_11 = (BitSlice_out1_15 == 1'b0 ? Log2Table_int32_13_out1 :
              Log2MinusTable_int32_13_out1);



  assign w_Log2MinusTable_int32_2_out1_10 = bitsll_w_1_out1_11 + if_bitget_w_w_WordLength_0_out1_11;



  assign if_bitget_w_w_WordLength_1_out1_12 = (alphabitget_w_w_WordLength_1_out1_11 == 1'b0 ? bitsll_w_1_out1_11 :
              w_Log2MinusTable_int32_2_out1_10);



  assign BitSlice1_out1_14 = if_bitget_w_w_WordLength_1_out1_12[32];



  assign BitSlice_out1_16 = if_bitget_w_w_WordLength_1_out1_12[33];



  assign alphabitget_w_w_WordLength_1_out1_12 = BitSlice1_out1_14 ^ BitSlice_out1_16;



  assign C1_out1 = 4'sb0010;



  assign C_out1 = 4'sb0011;



  assign if_bitget_w_w_WordLength_1_1_out1 = (BitSlice_out1_3 == 1'b0 ? C1_out1 :
              C_out1);



  assign Constant_out1_2 = 2'b00;



  assign Bit_Concat_out1_4 = {if_bitget_w_w_WordLength_1_1_out1, Constant_out1_2};



  assign dtc1_out1_1 = Bit_Concat_out1_4;



  assign bitsrl_y_int32_2_out1 = dtc1_out1_1 >> 8'd2;



  assign y_tmp1_out1 = dtc1_out1_1 - bitsrl_y_int32_2_out1;



  assign y_tmp1_out1_1 = dtc1_out1_1 + bitsrl_y_int32_2_out1;



  assign if_bitget_w_w_WordLength_0_1_out1 = (BitSlice1_out1_2 == 1'b0 ? y_tmp1_out1 :
              y_tmp1_out1_1);



  assign if_bitget_w_w_WordLength_1_1_out1_1 = (alphabitget_w_w_WordLength_1_out1 == 1'b0 ? dtc1_out1_1 :
              if_bitget_w_w_WordLength_0_1_out1);



  assign Constant_out1_3 = 3'b000;



  assign Bit_Concat_out1_5 = {if_bitget_w_w_WordLength_1_1_out1_1, Constant_out1_3};



  assign dtc1_out1_2 = Bit_Concat_out1_5;



  assign bitsrl_y_int32_2_out1_1 = dtc1_out1_2 >> 8'd3;



  assign y_tmp1_out1_2 = dtc1_out1_2 - bitsrl_y_int32_2_out1_1;



  assign y_tmp1_out1_3 = dtc1_out1_2 + bitsrl_y_int32_2_out1_1;



  assign if_bitget_w_w_WordLength_0_1_out1_1 = (BitSlice1_out1_3 == 1'b0 ? y_tmp1_out1_2 :
              y_tmp1_out1_3);



  assign if_bitget_w_w_WordLength_1_1_out1_2 = (alphabitget_w_w_WordLength_1_out1_1 == 1'b0 ? dtc1_out1_2 :
              if_bitget_w_w_WordLength_0_1_out1_1);



  assign Constant_out1_4 = 4'b0000;



  assign Bit_Concat_out1_6 = {if_bitget_w_w_WordLength_1_1_out1_2, Constant_out1_4};



  assign dtc1_out1_3 = Bit_Concat_out1_6;



  assign bitsrl_y_int32_2_out1_2 = dtc1_out1_3 >> 8'd4;



  assign y_tmp1_out1_4 = dtc1_out1_3 - bitsrl_y_int32_2_out1_2;



  assign y_tmp1_out1_5 = dtc1_out1_3 + bitsrl_y_int32_2_out1_2;



  assign if_bitget_w_w_WordLength_0_1_out1_2 = (BitSlice1_out1_4 == 1'b0 ? y_tmp1_out1_4 :
              y_tmp1_out1_5);



  assign if_bitget_w_w_WordLength_1_1_out1_3 = (alphabitget_w_w_WordLength_1_out1_2 == 1'b0 ? dtc1_out1_3 :
              if_bitget_w_w_WordLength_0_1_out1_2);



  assign Constant_out1_5 = 5'b00000;



  assign Bit_Concat_out1_7 = {if_bitget_w_w_WordLength_1_1_out1_3, Constant_out1_5};



  assign dtc1_out1_4 = Bit_Concat_out1_7;



  assign bitsrl_y_int32_2_out1_3 = dtc1_out1_4 >> 8'd5;



  assign y_tmp1_out1_6 = dtc1_out1_4 - bitsrl_y_int32_2_out1_3;



  assign y_tmp1_out1_7 = dtc1_out1_4 + bitsrl_y_int32_2_out1_3;



  assign if_bitget_w_w_WordLength_0_1_out1_3 = (BitSlice1_out1_5 == 1'b0 ? y_tmp1_out1_6 :
              y_tmp1_out1_7);



  assign if_bitget_w_w_WordLength_1_1_out1_4 = (alphabitget_w_w_WordLength_1_out1_3 == 1'b0 ? dtc1_out1_4 :
              if_bitget_w_w_WordLength_0_1_out1_3);



  assign Constant_out1_6 = 6'b000000;



  assign Bit_Concat_out1_8 = {if_bitget_w_w_WordLength_1_1_out1_4, Constant_out1_6};



  assign dtc1_out1_5 = Bit_Concat_out1_8;



  assign bitsrl_y_int32_2_out1_4 = dtc1_out1_5 >> 8'd6;



  assign y_tmp1_out1_8 = dtc1_out1_5 - bitsrl_y_int32_2_out1_4;



  assign y_tmp1_out1_9 = dtc1_out1_5 + bitsrl_y_int32_2_out1_4;



  assign if_bitget_w_w_WordLength_0_1_out1_4 = (BitSlice1_out1_6 == 1'b0 ? y_tmp1_out1_8 :
              y_tmp1_out1_9);



  assign if_bitget_w_w_WordLength_1_1_out1_5 = (alphabitget_w_w_WordLength_1_out1_4 == 1'b0 ? dtc1_out1_5 :
              if_bitget_w_w_WordLength_0_1_out1_4);



  assign Constant_out1_7 = 7'b0000000;



  assign Bit_Concat_out1_9 = {if_bitget_w_w_WordLength_1_1_out1_5, Constant_out1_7};



  assign dtc1_out1_6 = Bit_Concat_out1_9;



  assign bitsrl_y_int32_2_out1_5 = dtc1_out1_6 >> 8'd7;



  assign y_tmp1_out1_10 = dtc1_out1_6 - bitsrl_y_int32_2_out1_5;



  assign y_tmp1_out1_11 = dtc1_out1_6 + bitsrl_y_int32_2_out1_5;



  assign if_bitget_w_w_WordLength_0_1_out1_5 = (BitSlice1_out1_7 == 1'b0 ? y_tmp1_out1_10 :
              y_tmp1_out1_11);



  assign if_bitget_w_w_WordLength_1_1_out1_6 = (alphabitget_w_w_WordLength_1_out1_5 == 1'b0 ? dtc1_out1_6 :
              if_bitget_w_w_WordLength_0_1_out1_5);



  assign Constant_out1_8 = 5'b00000;



  assign Bit_Concat_out1_10 = {if_bitget_w_w_WordLength_1_1_out1_6, Constant_out1_8};



  assign dtc1_out1_7 = Bit_Concat_out1_10;



  assign bitsrl_y_int32_2_out1_6 = dtc1_out1_7 >> 8'd8;



  assign y_tmp1_out1_12 = dtc1_out1_7 - bitsrl_y_int32_2_out1_6;



  assign y_tmp1_out1_13 = dtc1_out1_7 + bitsrl_y_int32_2_out1_6;



  assign if_bitget_w_w_WordLength_0_1_out1_6 = (BitSlice1_out1_8 == 1'b0 ? y_tmp1_out1_12 :
              y_tmp1_out1_13);



  assign if_bitget_w_w_WordLength_1_1_out1_7 = (alphabitget_w_w_WordLength_1_out1_6 == 1'b0 ? dtc1_out1_7 :
              if_bitget_w_w_WordLength_0_1_out1_6);



  assign bitsrl_y_int32_2_out1_7 = if_bitget_w_w_WordLength_1_1_out1_7 >> 8'd9;



  assign y_tmp1_out1_14 = if_bitget_w_w_WordLength_1_1_out1_7 - bitsrl_y_int32_2_out1_7;



  assign y_tmp1_out1_15 = if_bitget_w_w_WordLength_1_1_out1_7 + bitsrl_y_int32_2_out1_7;



  assign if_bitget_w_w_WordLength_0_1_out1_7 = (BitSlice1_out1_9 == 1'b0 ? y_tmp1_out1_14 :
              y_tmp1_out1_15);



  assign if_bitget_w_w_WordLength_1_1_out1_8 = (alphabitget_w_w_WordLength_1_out1_7 == 1'b0 ? if_bitget_w_w_WordLength_1_1_out1_7 :
              if_bitget_w_w_WordLength_0_1_out1_7);



  assign bitsrl_y_int32_2_out1_8 = if_bitget_w_w_WordLength_1_1_out1_8 >> 8'd10;



  assign y_tmp1_out1_16 = if_bitget_w_w_WordLength_1_1_out1_8 - bitsrl_y_int32_2_out1_8;



  assign y_tmp1_out1_17 = if_bitget_w_w_WordLength_1_1_out1_8 + bitsrl_y_int32_2_out1_8;



  assign if_bitget_w_w_WordLength_0_1_out1_8 = (BitSlice1_out1_10 == 1'b0 ? y_tmp1_out1_16 :
              y_tmp1_out1_17);



  assign if_bitget_w_w_WordLength_1_1_out1_9 = (alphabitget_w_w_WordLength_1_out1_8 == 1'b0 ? if_bitget_w_w_WordLength_1_1_out1_8 :
              if_bitget_w_w_WordLength_0_1_out1_8);



  assign bitsrl_y_int32_2_out1_9 = if_bitget_w_w_WordLength_1_1_out1_9 >> 8'd11;



  assign y_tmp1_out1_18 = if_bitget_w_w_WordLength_1_1_out1_9 - bitsrl_y_int32_2_out1_9;



  assign y_tmp1_out1_19 = if_bitget_w_w_WordLength_1_1_out1_9 + bitsrl_y_int32_2_out1_9;



  assign if_bitget_w_w_WordLength_0_1_out1_9 = (BitSlice1_out1_11 == 1'b0 ? y_tmp1_out1_18 :
              y_tmp1_out1_19);



  assign if_bitget_w_w_WordLength_1_1_out1_10 = (alphabitget_w_w_WordLength_1_out1_9 == 1'b0 ? if_bitget_w_w_WordLength_1_1_out1_9 :
              if_bitget_w_w_WordLength_0_1_out1_9);



  assign bitsrl_y_int32_2_out1_10 = if_bitget_w_w_WordLength_1_1_out1_10 >> 8'd12;



  assign y_tmp1_out1_20 = if_bitget_w_w_WordLength_1_1_out1_10 - bitsrl_y_int32_2_out1_10;



  assign y_tmp1_out1_21 = if_bitget_w_w_WordLength_1_1_out1_10 + bitsrl_y_int32_2_out1_10;



  assign if_bitget_w_w_WordLength_0_1_out1_10 = (BitSlice1_out1_12 == 1'b0 ? y_tmp1_out1_20 :
              y_tmp1_out1_21);



  assign if_bitget_w_w_WordLength_1_1_out1_11 = (alphabitget_w_w_WordLength_1_out1_10 == 1'b0 ? if_bitget_w_w_WordLength_1_1_out1_10 :
              if_bitget_w_w_WordLength_0_1_out1_10);



  assign bitsrl_y_int32_2_out1_11 = if_bitget_w_w_WordLength_1_1_out1_11 >> 8'd13;



  assign y_tmp1_out1_22 = if_bitget_w_w_WordLength_1_1_out1_11 - bitsrl_y_int32_2_out1_11;



  assign y_tmp1_out1_23 = if_bitget_w_w_WordLength_1_1_out1_11 + bitsrl_y_int32_2_out1_11;



  assign if_bitget_w_w_WordLength_0_1_out1_11 = (BitSlice1_out1_13 == 1'b0 ? y_tmp1_out1_22 :
              y_tmp1_out1_23);



  assign if_bitget_w_w_WordLength_1_1_out1_12 = (alphabitget_w_w_WordLength_1_out1_11 == 1'b0 ? if_bitget_w_w_WordLength_1_1_out1_11 :
              if_bitget_w_w_WordLength_0_1_out1_11);



  assign bitsrl_y_int32_2_out1_12 = if_bitget_w_w_WordLength_1_1_out1_12 >> 8'd14;



  assign y_tmp1_out1_24 = if_bitget_w_w_WordLength_1_1_out1_12 - bitsrl_y_int32_2_out1_12;



  assign y_tmp1_out1_25 = if_bitget_w_w_WordLength_1_1_out1_12 + bitsrl_y_int32_2_out1_12;



  assign if_bitget_w_w_WordLength_0_1_out1_12 = (BitSlice1_out1_14 == 1'b0 ? y_tmp1_out1_24 :
              y_tmp1_out1_25);



  assign if_bitget_w_w_WordLength_1_1_out1_13 = (alphabitget_w_w_WordLength_1_out1_12 == 1'b0 ? if_bitget_w_w_WordLength_1_1_out1_12 :
              if_bitget_w_w_WordLength_0_1_out1_12);



  assign alpha1_out1_1 = 2'b00;



  assign Bit_Concat1_out1 = {alpha1_out1_1, if_bitget_tmp2_tmp2_WordLength_1_out1};



  assign reinterpretcast_bitconcat_fi_0_1_out1 = Bit_Concat1_out1;



  assign Switch1_out1 = (alpha127_6_out1 == 1'b0 ? if_bitget_w_w_WordLength_1_1_out1_13 :
              reinterpretcast_bitconcat_fi_0_1_out1);



  assign Bit_Slice_out1 = if_bitget_w_w_WordLength_1_out1_12[33:11];



  assign Data_Type_Conversion_out1_2 = Bit_Slice_out1;



  assign Log2Table_int32_14_out1 = 23'sb10100011101010111001110;



  assign Log2MinusTable_int32_14_out1 = 23'sb01011100010101011101011;



  assign if_bitget_w_w_WordLength_0_out1_12 = (BitSlice_out1_16 == 1'b0 ? Log2Table_int32_14_out1 :
              Log2MinusTable_int32_14_out1);



  assign w_Log2MinusTable_int32_2_out1_11 = Data_Type_Conversion_out1_2 + if_bitget_w_w_WordLength_0_out1_12;



  assign if_bitget_w_w_WordLength_1_out1_13 = (alphabitget_w_w_WordLength_1_out1_12 == 1'b0 ? Data_Type_Conversion_out1_2 :
              w_Log2MinusTable_int32_2_out1_11);



  assign Constant5_out1 = 1'b0;



  assign Bit_Slice3_out1 = reinterpretcast_mant_cor_nume_out1[23:2];



  assign Bit_Concat3_out1_1 = {Constant5_out1, Bit_Slice3_out1};



  assign Data_Type_Conversion3_out1 = Bit_Concat3_out1_1;



  assign Switch4_out1_1 = (alpha127_6_out1 == 1'b0 ? if_bitget_w_w_WordLength_1_out1_13 :
              Data_Type_Conversion3_out1);



  assign alpha0_693147182464600_out1 = 20'sb11010011101000111000;



  assign alpha0_33333_out1 = 20'sb11101010101010101011;



  assign Bit_Slice2_out1 = Switch1_out1[34:15];



  assign Data_Type_Conversion1_out1 = Bit_Slice2_out1;



  assign Switch3_out1 = (alpha127_6_out1 == 1'b0 ? alpha0_693147182464600_out1 :
              alpha0_33333_out1);



  assign tmp1_0_69314717873930931_mul_temp = Switch4_out1_1 * Switch3_out1;
  assign tmp1_0_69314717873930931_out1 = tmp1_0_69314717873930931_mul_temp[40:18];



  assign tmp2_y_mul_temp = Data_Type_Conversion1_out1 * tmp1_0_69314717873930931_out1;
  assign tmp2_y_out1 = tmp2_y_mul_temp[40:20];



  assign Bit_Slice1_out1 = tmp2_y_out1[20];



  assign Constant1_out1 = 15'sb000000000000000;



  assign Constant_out1_9 = 15'sb111111111111111;



  assign Switch_out1_1 = (Bit_Slice1_out1 == 1'b0 ? Constant1_out1 :
              Constant_out1_9);



  assign Unary_Minus_cast = {Switch1_out1[35], Switch1_out1};
  assign Unary_Minus_cast_1 =  - (Unary_Minus_cast);
  assign Unary_Minus_out1 = Unary_Minus_cast_1[35:0];



  assign Bit_Concat_out1_11 = {Switch_out1_1, tmp2_y_out1};



  assign DTC2_out1_1 = Bit_Concat_out1_11;



  assign y_tmp3_out1 = Unary_Minus_out1 + DTC2_out1_1;



  assign Bit_Slice4_out1 = tmp2_y_out1[20];



  assign Constant2_out1 = 14'b00000000000000;



  assign Bit_Concat1_out1_1 = {Bit_Slice4_out1, tmp2_y_out1, Constant2_out1};



  assign DTC1_out1_8 = Bit_Concat1_out1_1;



  assign Switch2_out1 = (alpha127_6_out1 == 1'b0 ? y_tmp3_out1 :
              DTC1_out1_8);



  assign alpha1_out1_2 = 2'b00;



  assign BitSlice2_out1_1 = if_shift_sign_out1[38:33];



  assign Bit_Concat1_out1_2 = {alpha1_out1_2, BitSlice2_out1_1};



  assign alpha127_1_out1 = 8'b00000001;



  assign alpha127_exp_tmp_out1 = Bit_Concat1_out1_2 + alpha127_1_out1;



  assign if_sticky_4_out1 = (Logical_Operator_out1_1 == 1'b0 ? Bit_Concat1_out1_2 :
              alpha127_exp_tmp_out1);



  assign cast_cfType_ExponentBias_lik_1_out1 = 8'b10000000;



  assign cast_cfType_ExponentBias_lik_1_out1_1 = cast_cfType_ExponentBias_lik_1_out1 - aExponent;



  assign cast_cfType_ExponentBias_lik_2_out1 = cast_cfType_ExponentBias_lik_out1_2 + cast_cfType_ExponentBias_lik_1_out1_1;



  assign if_sticky_2_out1 = (alpha127_6_out1 == 1'b0 ? if_sticky_4_out1 :
              cast_cfType_ExponentBias_lik_2_out1);



  assign Shift_Arithmetic_out1_1 = Switch2_out1 >>> if_sticky_2_out1;



  assign Add_out1 = Switch4_out1 + Shift_Arithmetic_out1_1;



  assign Bit_Slice_out1_1 = Add_out1[34];



  assign Bit_Slice1_out1_1 = Add_out1[33:27];



  assign Bit_Slice7_out1 = Bit_Slice1_out1_1[6];



  assign Bit_Slice6_out1 = Bit_Slice1_out1_1[5];



  assign Logical_Operator3_out1 = Bit_Slice7_out1 | Bit_Slice6_out1;



  assign Bit_Slice5_out1 = Bit_Slice1_out1_1[4];



  assign Bit_Slice3_out1_1 = Bit_Slice1_out1_1[3];



  assign Logical_Operator_out1_2 = Bit_Slice5_out1 | Bit_Slice3_out1_1;



  assign Bit_Slice2_out1_1 = Bit_Slice1_out1_1[2];



  assign Bit_Slice1_out1_2 = Bit_Slice1_out1_1[1];



  assign Bit_Slice_out1_2 = Bit_Slice1_out1_1[0];



  assign Start_out1 = 8'sb00000111;



  assign Logical_Operator4_out1 = Bit_Slice2_out1_1 | Bit_Slice1_out1_2;



  assign Start_1_out1 = 8'sb00000110;



  assign Switch_out1_2 = (Bit_Slice_out1_2 == 1'b0 ? Start_out1 :
              Start_1_out1);



  assign Start_2_out1 = 8'sb00000101;



  assign Start_3_out1 = 8'sb00000100;



  assign Logical_Operator1_out1 = Logical_Operator3_out1 | Logical_Operator_out1_2;



  assign Switch2_out1_1 = (Bit_Slice2_out1_1 == 1'b0 ? Start_2_out1 :
              Start_3_out1);



  assign Switch1_out1_1 = (Logical_Operator4_out1 == 1'b0 ? Switch_out1_2 :
              Switch2_out1_1);



  assign Start_4_out1 = 8'sb00000011;



  assign Start_5_out1 = 8'sb00000010;



  assign Switch5_out1 = (Bit_Slice5_out1 == 1'b0 ? Start_4_out1 :
              Start_5_out1);



  assign Start_6_out1 = 8'sb00000001;



  assign Start_7_out1 = 8'sb00000000;



  assign Switch7_out1 = (Bit_Slice7_out1 == 1'b0 ? Start_6_out1 :
              Start_7_out1);



  assign Switch6_out1 = (Logical_Operator3_out1 == 1'b0 ? Switch5_out1 :
              Switch7_out1);



  assign Switch4_out1_2 = (Logical_Operator1_out1 == 1'b0 ? Switch1_out1_1 :
              Switch6_out1);



  assign DTC_out1 = Switch4_out1_2;



  assign Shift_Arithmetic1_out1 = Add_out1 <<< DTC_out1;



  assign Bit_Shift_out1_1 = Add_out1 >>> 8'd1;



  assign Switch_out1_3 = (Bit_Slice_out1_1 == 1'b0 ? Shift_Arithmetic1_out1 :
              Bit_Shift_out1_1);



  assign Bit_Slice1_out1_3 = Switch_out1_3[35];



  assign Bit_Concat_out1_12 = {Bit_Slice1_out1_3, Switch_out1_3};



  assign Data_Type_Conversion_out1_3 = Bit_Concat_out1_12;



  assign Constant2_out1_1 = 36'shE00000000;



  assign Add1_out1 = Shift_Arithmetic_out1_1 + Constant2_out1_1;



  assign Bit_Slice2_out1_2 = Add1_out1[35];



  assign Bit_Concat1_out1_3 = {Bit_Slice2_out1_2, Add1_out1};



  assign Data_Type_Conversion1_out1_1 = Bit_Concat1_out1_3;



  assign R_mant_b_norm_out1 = Data_Type_Conversion_out1_3 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice_out1_3 = R_mant_b_norm_out1[36];



  assign Bit_Shift_out1_2 = Data_Type_Conversion_out1_3 <<< 8'd1;



  assign R_mant_b_norm1_out1 = Bit_Shift_out1_2 + Data_Type_Conversion1_out1_1;



  assign Switch_out1_4 = (Bit_Slice_out1_3 == 1'b0 ? R_mant_b_norm_out1 :
              R_mant_b_norm1_out1);



  assign Bit_Shift2_out1 = Switch_out1_4 <<< 8'd1;



  assign Add1_out1_1 = Bit_Shift2_out1 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice1_out1_4 = Add1_out1_1[36];



  assign Bit_Shift1_out1 = Switch_out1_4 <<< 8'd2;



  assign Add_out1_1 = Bit_Shift1_out1 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice_out1_4 = Add_out1_1[36];



  assign Logical_Operator1_out1_1 =  ~ Bit_Slice_out1_4;



  assign Logical_Operator4_out1_1 = Logical_Operator1_out1_1 & Bit_Slice1_out1_4;



  assign Bit_Shift_out1_3 = Data_Type_Conversion1_out1_1 <<< 8'd1;



  assign Add_out1_2 = Bit_Shift_out1_3 + Data_Type_Conversion1_out1_1;



  assign Add2_out1 = Bit_Shift1_out1 + Add_out1_2;



  assign Bit_Slice2_out1_3 = Add2_out1[36];



  assign Logical_Operator_out1_3 =  ~ Bit_Slice1_out1_4;



  assign Logical_Operator2_out1 =  ~ Bit_Slice2_out1_3;



  assign Logical_Operator3_out1_1 = Logical_Operator4_out1_1 | Logical_Operator2_out1;



  assign Bit_Concat_out1_13 = {Constant_out1, Logical_Operator_out1_3, Logical_Operator3_out1_1};



  assign Bit_Shift3_out1 = Add1_out1_1 <<< 8'd1;



  assign Switch1_out1_2 = (Bit_Slice2_out1_3 == 1'b0 ? Add2_out1 :
              Bit_Shift3_out1);



  assign Switch_out1_5 = (Bit_Slice_out1_4 == 1'b0 ? Add_out1_1 :
              Bit_Shift1_out1);



  assign Switch2_out1_2 = (Bit_Slice1_out1_4 == 1'b0 ? Switch1_out1_2 :
              Switch_out1_5);



  assign Bit_Shift2_out1_1 = Switch2_out1_2 <<< 8'd1;



  assign Add1_out1_2 = Bit_Shift2_out1_1 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice1_out1_5 = Add1_out1_2[36];



  assign Bit_Shift1_out1_1 = Switch2_out1_2 <<< 8'd2;



  assign Add_out1_3 = Bit_Shift1_out1_1 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice_out1_5 = Add_out1_3[36];



  assign Logical_Operator1_out1_2 =  ~ Bit_Slice_out1_5;



  assign Logical_Operator4_out1_2 = Logical_Operator1_out1_2 & Bit_Slice1_out1_5;



  assign Add2_out1_1 = Bit_Shift1_out1_1 + Add_out1_2;



  assign Bit_Slice2_out1_4 = Add2_out1_1[36];



  assign Logical_Operator_out1_4 =  ~ Bit_Slice1_out1_5;



  assign Logical_Operator2_out1_1 =  ~ Bit_Slice2_out1_4;



  assign Logical_Operator3_out1_2 = Logical_Operator4_out1_2 | Logical_Operator2_out1_1;



  assign Bit_Concat_out1_14 = {Bit_Concat_out1_13, {Logical_Operator_out1_4, Logical_Operator3_out1_2}};



  assign Bit_Shift3_out1_1 = Add1_out1_2 <<< 8'd1;



  assign Switch1_out1_3 = (Bit_Slice2_out1_4 == 1'b0 ? Add2_out1_1 :
              Bit_Shift3_out1_1);



  assign Switch_out1_6 = (Bit_Slice_out1_5 == 1'b0 ? Add_out1_3 :
              Bit_Shift1_out1_1);



  assign Switch2_out1_3 = (Bit_Slice1_out1_5 == 1'b0 ? Switch1_out1_3 :
              Switch_out1_6);



  assign Bit_Shift2_out1_2 = Switch2_out1_3 <<< 8'd1;



  assign Add1_out1_3 = Bit_Shift2_out1_2 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice1_out1_6 = Add1_out1_3[36];



  assign Bit_Shift1_out1_2 = Switch2_out1_3 <<< 8'd2;



  assign Add_out1_4 = Bit_Shift1_out1_2 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice_out1_6 = Add_out1_4[36];



  assign Logical_Operator1_out1_3 =  ~ Bit_Slice_out1_6;



  assign Logical_Operator4_out1_3 = Logical_Operator1_out1_3 & Bit_Slice1_out1_6;



  assign Add2_out1_2 = Bit_Shift1_out1_2 + Add_out1_2;



  assign Bit_Slice2_out1_5 = Add2_out1_2[36];



  assign Logical_Operator_out1_5 =  ~ Bit_Slice1_out1_6;



  assign Logical_Operator2_out1_2 =  ~ Bit_Slice2_out1_5;



  assign Logical_Operator3_out1_3 = Logical_Operator4_out1_3 | Logical_Operator2_out1_2;



  assign Bit_Concat_out1_15 = {Bit_Concat_out1_14, {Logical_Operator_out1_5, Logical_Operator3_out1_3}};



  assign Bit_Shift3_out1_2 = Add1_out1_3 <<< 8'd1;



  assign Switch1_out1_4 = (Bit_Slice2_out1_5 == 1'b0 ? Add2_out1_2 :
              Bit_Shift3_out1_2);



  assign Switch_out1_7 = (Bit_Slice_out1_6 == 1'b0 ? Add_out1_4 :
              Bit_Shift1_out1_2);



  assign Switch2_out1_4 = (Bit_Slice1_out1_6 == 1'b0 ? Switch1_out1_4 :
              Switch_out1_7);



  assign Bit_Shift2_out1_3 = Switch2_out1_4 <<< 8'd1;



  assign Add1_out1_4 = Bit_Shift2_out1_3 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice1_out1_7 = Add1_out1_4[36];



  assign Bit_Shift1_out1_3 = Switch2_out1_4 <<< 8'd2;



  assign Add_out1_5 = Bit_Shift1_out1_3 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice_out1_7 = Add_out1_5[36];



  assign Logical_Operator1_out1_4 =  ~ Bit_Slice_out1_7;



  assign Logical_Operator4_out1_4 = Logical_Operator1_out1_4 & Bit_Slice1_out1_7;



  assign Add2_out1_3 = Bit_Shift1_out1_3 + Add_out1_2;



  assign Bit_Slice2_out1_6 = Add2_out1_3[36];



  assign Logical_Operator_out1_6 =  ~ Bit_Slice1_out1_7;



  assign Logical_Operator2_out1_3 =  ~ Bit_Slice2_out1_6;



  assign Logical_Operator3_out1_4 = Logical_Operator4_out1_4 | Logical_Operator2_out1_3;



  assign Bit_Concat_out1_16 = {Bit_Concat_out1_15, {Logical_Operator_out1_6, Logical_Operator3_out1_4}};



  assign Bit_Shift3_out1_3 = Add1_out1_4 <<< 8'd1;



  assign Switch1_out1_5 = (Bit_Slice2_out1_6 == 1'b0 ? Add2_out1_3 :
              Bit_Shift3_out1_3);



  assign Switch_out1_8 = (Bit_Slice_out1_7 == 1'b0 ? Add_out1_5 :
              Bit_Shift1_out1_3);



  assign Switch2_out1_5 = (Bit_Slice1_out1_7 == 1'b0 ? Switch1_out1_5 :
              Switch_out1_8);



  assign Bit_Shift2_out1_4 = Switch2_out1_5 <<< 8'd1;



  assign Add1_out1_5 = Bit_Shift2_out1_4 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice1_out1_8 = Add1_out1_5[36];



  assign Bit_Shift1_out1_4 = Switch2_out1_5 <<< 8'd2;



  assign Add_out1_6 = Bit_Shift1_out1_4 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice_out1_8 = Add_out1_6[36];



  assign Logical_Operator1_out1_5 =  ~ Bit_Slice_out1_8;



  assign Logical_Operator4_out1_5 = Logical_Operator1_out1_5 & Bit_Slice1_out1_8;



  assign Add2_out1_4 = Bit_Shift1_out1_4 + Add_out1_2;



  assign Bit_Slice2_out1_7 = Add2_out1_4[36];



  assign Logical_Operator_out1_7 =  ~ Bit_Slice1_out1_8;



  assign Logical_Operator2_out1_4 =  ~ Bit_Slice2_out1_7;



  assign Logical_Operator3_out1_5 = Logical_Operator4_out1_5 | Logical_Operator2_out1_4;



  assign Bit_Concat_out1_17 = {Bit_Concat_out1_16, {Logical_Operator_out1_7, Logical_Operator3_out1_5}};



  assign Bit_Shift3_out1_4 = Add1_out1_5 <<< 8'd1;



  assign Switch1_out1_6 = (Bit_Slice2_out1_7 == 1'b0 ? Add2_out1_4 :
              Bit_Shift3_out1_4);



  assign Switch_out1_9 = (Bit_Slice_out1_8 == 1'b0 ? Add_out1_6 :
              Bit_Shift1_out1_4);



  assign Switch2_out1_6 = (Bit_Slice1_out1_8 == 1'b0 ? Switch1_out1_6 :
              Switch_out1_9);



  assign Bit_Shift2_out1_5 = Switch2_out1_6 <<< 8'd1;



  assign Add1_out1_6 = Bit_Shift2_out1_5 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice1_out1_9 = Add1_out1_6[36];



  assign Bit_Shift1_out1_5 = Switch2_out1_6 <<< 8'd2;



  assign Add_out1_7 = Bit_Shift1_out1_5 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice_out1_9 = Add_out1_7[36];



  assign Logical_Operator1_out1_6 =  ~ Bit_Slice_out1_9;



  assign Logical_Operator4_out1_6 = Logical_Operator1_out1_6 & Bit_Slice1_out1_9;



  assign Add2_out1_5 = Bit_Shift1_out1_5 + Add_out1_2;



  assign Bit_Slice2_out1_8 = Add2_out1_5[36];



  assign Logical_Operator_out1_8 =  ~ Bit_Slice1_out1_9;



  assign Logical_Operator2_out1_5 =  ~ Bit_Slice2_out1_8;



  assign Logical_Operator3_out1_6 = Logical_Operator4_out1_6 | Logical_Operator2_out1_5;



  assign Bit_Concat_out1_18 = {Bit_Concat_out1_17, {Logical_Operator_out1_8, Logical_Operator3_out1_6}};



  assign Bit_Shift3_out1_5 = Add1_out1_6 <<< 8'd1;



  assign Switch1_out1_7 = (Bit_Slice2_out1_8 == 1'b0 ? Add2_out1_5 :
              Bit_Shift3_out1_5);



  assign Switch_out1_10 = (Bit_Slice_out1_9 == 1'b0 ? Add_out1_7 :
              Bit_Shift1_out1_5);



  assign Switch2_out1_7 = (Bit_Slice1_out1_9 == 1'b0 ? Switch1_out1_7 :
              Switch_out1_10);



  assign Bit_Shift2_out1_6 = Switch2_out1_7 <<< 8'd1;



  assign Add1_out1_7 = Bit_Shift2_out1_6 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice1_out1_10 = Add1_out1_7[36];



  assign Bit_Shift1_out1_6 = Switch2_out1_7 <<< 8'd2;



  assign Add_out1_8 = Bit_Shift1_out1_6 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice_out1_10 = Add_out1_8[36];



  assign Logical_Operator1_out1_7 =  ~ Bit_Slice_out1_10;



  assign Logical_Operator4_out1_7 = Logical_Operator1_out1_7 & Bit_Slice1_out1_10;



  assign Add2_out1_6 = Bit_Shift1_out1_6 + Add_out1_2;



  assign Bit_Slice2_out1_9 = Add2_out1_6[36];



  assign Logical_Operator_out1_9 =  ~ Bit_Slice1_out1_10;



  assign Logical_Operator2_out1_6 =  ~ Bit_Slice2_out1_9;



  assign Logical_Operator3_out1_7 = Logical_Operator4_out1_7 | Logical_Operator2_out1_6;



  assign Bit_Concat_out1_19 = {Bit_Concat_out1_18, {Logical_Operator_out1_9, Logical_Operator3_out1_7}};



  assign Bit_Shift3_out1_6 = Add1_out1_7 <<< 8'd1;



  assign Switch1_out1_8 = (Bit_Slice2_out1_9 == 1'b0 ? Add2_out1_6 :
              Bit_Shift3_out1_6);



  assign Switch_out1_11 = (Bit_Slice_out1_10 == 1'b0 ? Add_out1_8 :
              Bit_Shift1_out1_6);



  assign Switch2_out1_8 = (Bit_Slice1_out1_10 == 1'b0 ? Switch1_out1_8 :
              Switch_out1_11);



  assign Bit_Shift2_out1_7 = Switch2_out1_8 <<< 8'd1;



  assign Add1_out1_8 = Bit_Shift2_out1_7 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice1_out1_11 = Add1_out1_8[36];



  assign Bit_Shift1_out1_7 = Switch2_out1_8 <<< 8'd2;



  assign Add_out1_9 = Bit_Shift1_out1_7 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice_out1_11 = Add_out1_9[36];



  assign Logical_Operator1_out1_8 =  ~ Bit_Slice_out1_11;



  assign Logical_Operator4_out1_8 = Logical_Operator1_out1_8 & Bit_Slice1_out1_11;



  assign Add2_out1_7 = Bit_Shift1_out1_7 + Add_out1_2;



  assign Bit_Slice2_out1_10 = Add2_out1_7[36];



  assign Logical_Operator_out1_10 =  ~ Bit_Slice1_out1_11;



  assign Logical_Operator2_out1_7 =  ~ Bit_Slice2_out1_10;



  assign Logical_Operator3_out1_8 = Logical_Operator4_out1_8 | Logical_Operator2_out1_7;



  assign Bit_Concat_out1_20 = {Bit_Concat_out1_19, {Logical_Operator_out1_10, Logical_Operator3_out1_8}};



  assign Bit_Shift3_out1_7 = Add1_out1_8 <<< 8'd1;



  assign Switch1_out1_9 = (Bit_Slice2_out1_10 == 1'b0 ? Add2_out1_7 :
              Bit_Shift3_out1_7);



  assign Switch_out1_12 = (Bit_Slice_out1_11 == 1'b0 ? Add_out1_9 :
              Bit_Shift1_out1_7);



  assign Switch2_out1_9 = (Bit_Slice1_out1_11 == 1'b0 ? Switch1_out1_9 :
              Switch_out1_12);



  assign Bit_Shift2_out1_8 = Switch2_out1_9 <<< 8'd1;



  assign Add1_out1_9 = Bit_Shift2_out1_8 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice1_out1_12 = Add1_out1_9[36];



  assign Bit_Shift1_out1_8 = Switch2_out1_9 <<< 8'd2;



  assign Add_out1_10 = Bit_Shift1_out1_8 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice_out1_12 = Add_out1_10[36];



  assign Logical_Operator1_out1_9 =  ~ Bit_Slice_out1_12;



  assign Logical_Operator4_out1_9 = Logical_Operator1_out1_9 & Bit_Slice1_out1_12;



  assign Add2_out1_8 = Bit_Shift1_out1_8 + Add_out1_2;



  assign Bit_Slice2_out1_11 = Add2_out1_8[36];



  assign Logical_Operator_out1_11 =  ~ Bit_Slice1_out1_12;



  assign Logical_Operator2_out1_8 =  ~ Bit_Slice2_out1_11;



  assign Logical_Operator3_out1_9 = Logical_Operator4_out1_9 | Logical_Operator2_out1_8;



  assign Bit_Concat_out1_21 = {Bit_Concat_out1_20, {Logical_Operator_out1_11, Logical_Operator3_out1_9}};



  assign Bit_Shift3_out1_8 = Add1_out1_9 <<< 8'd1;



  assign Switch1_out1_10 = (Bit_Slice2_out1_11 == 1'b0 ? Add2_out1_8 :
              Bit_Shift3_out1_8);



  assign Switch_out1_13 = (Bit_Slice_out1_12 == 1'b0 ? Add_out1_10 :
              Bit_Shift1_out1_8);



  assign Switch2_out1_10 = (Bit_Slice1_out1_12 == 1'b0 ? Switch1_out1_10 :
              Switch_out1_13);



  assign Bit_Shift2_out1_9 = Switch2_out1_10 <<< 8'd1;



  assign Add1_out1_10 = Bit_Shift2_out1_9 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice1_out1_13 = Add1_out1_10[36];



  assign Bit_Shift1_out1_9 = Switch2_out1_10 <<< 8'd2;



  assign Add_out1_11 = Bit_Shift1_out1_9 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice_out1_13 = Add_out1_11[36];



  assign Logical_Operator1_out1_10 =  ~ Bit_Slice_out1_13;



  assign Logical_Operator4_out1_10 = Logical_Operator1_out1_10 & Bit_Slice1_out1_13;



  assign Add2_out1_9 = Bit_Shift1_out1_9 + Add_out1_2;



  assign Bit_Slice2_out1_12 = Add2_out1_9[36];



  assign Logical_Operator_out1_12 =  ~ Bit_Slice1_out1_13;



  assign Logical_Operator2_out1_9 =  ~ Bit_Slice2_out1_12;



  assign Logical_Operator3_out1_10 = Logical_Operator4_out1_10 | Logical_Operator2_out1_9;



  assign Bit_Concat_out1_22 = {Bit_Concat_out1_21, {Logical_Operator_out1_12, Logical_Operator3_out1_10}};



  assign Bit_Shift3_out1_9 = Add1_out1_10 <<< 8'd1;



  assign Switch1_out1_11 = (Bit_Slice2_out1_12 == 1'b0 ? Add2_out1_9 :
              Bit_Shift3_out1_9);



  assign Switch_out1_14 = (Bit_Slice_out1_13 == 1'b0 ? Add_out1_11 :
              Bit_Shift1_out1_9);



  assign Switch2_out1_11 = (Bit_Slice1_out1_13 == 1'b0 ? Switch1_out1_11 :
              Switch_out1_14);



  assign Bit_Shift2_out1_10 = Switch2_out1_11 <<< 8'd1;



  assign Add1_out1_11 = Bit_Shift2_out1_10 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice1_out1_14 = Add1_out1_11[36];



  assign Bit_Shift1_out1_10 = Switch2_out1_11 <<< 8'd2;



  assign Add_out1_12 = Bit_Shift1_out1_10 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice_out1_14 = Add_out1_12[36];



  assign Logical_Operator1_out1_11 =  ~ Bit_Slice_out1_14;



  assign Logical_Operator4_out1_11 = Logical_Operator1_out1_11 & Bit_Slice1_out1_14;



  assign Add2_out1_10 = Bit_Shift1_out1_10 + Add_out1_2;



  assign Bit_Slice2_out1_13 = Add2_out1_10[36];



  assign Logical_Operator_out1_13 =  ~ Bit_Slice1_out1_14;



  assign Logical_Operator2_out1_10 =  ~ Bit_Slice2_out1_13;



  assign Logical_Operator3_out1_11 = Logical_Operator4_out1_11 | Logical_Operator2_out1_10;



  assign Bit_Concat_out1_23 = {Bit_Concat_out1_22, {Logical_Operator_out1_13, Logical_Operator3_out1_11}};



  assign Bit_Shift3_out1_10 = Add1_out1_11 <<< 8'd1;



  assign Switch1_out1_12 = (Bit_Slice2_out1_13 == 1'b0 ? Add2_out1_10 :
              Bit_Shift3_out1_10);



  assign Switch_out1_15 = (Bit_Slice_out1_14 == 1'b0 ? Add_out1_12 :
              Bit_Shift1_out1_10);



  assign Switch2_out1_12 = (Bit_Slice1_out1_14 == 1'b0 ? Switch1_out1_12 :
              Switch_out1_15);



  assign Bit_Shift2_out1_11 = Switch2_out1_12 <<< 8'd1;



  assign Add1_out1_12 = Bit_Shift2_out1_11 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice1_out1_15 = Add1_out1_12[36];



  assign Bit_Shift1_out1_11 = Switch2_out1_12 <<< 8'd2;



  assign Add_out1_13 = Bit_Shift1_out1_11 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice_out1_15 = Add_out1_13[36];



  assign Logical_Operator1_out1_12 =  ~ Bit_Slice_out1_15;



  assign Logical_Operator_out1_14 =  ~ Bit_Slice1_out1_15;



  assign Logical_Operator4_out1_12 = Logical_Operator1_out1_12 & Bit_Slice1_out1_15;



  assign Add2_out1_11 = Bit_Shift1_out1_11 + Add_out1_2;



  assign Bit_Slice2_out1_14 = Add2_out1_11[36];



  assign Logical_Operator2_out1_11 =  ~ Bit_Slice2_out1_14;



  assign Logical_Operator3_out1_12 = Logical_Operator4_out1_12 | Logical_Operator2_out1_11;



  assign Bit_Concat_out1_24 = {Bit_Concat_out1_23, {Logical_Operator_out1_14, Logical_Operator3_out1_12}};



  assign Bit_Slice_out1_16 = Bit_Concat_out1_24[23:0];



  assign Bit_Slice_out1_17 = Switch_out1_3[32:9];



  assign Switch1_out1_13 = (alpha127_6_out1 == 1'b0 ? Bit_Slice_out1_16 :
              Bit_Slice_out1_17);



  assign Bit_Concat_out1_25 = {alpha0_out1, Switch1_out1_13};



  assign BitSlice1_out1_15 = Bit_Concat_out1_25[1];



  assign BitSlice_out1_17 = Bit_Concat_out1_25[0];



  assign Logical_Operator1_out1_13 = Logical_Operator_out1_1 | alpha127_6_out1;



  assign alphabitget_Mant_tmp_2_0_out1 = BitSlice1_out1_15 | Logical_Operator1_out1_13;



  assign alphabitget_Mant_tmp_1_0_out1 = BitSlice_out1_17 & alphabitget_Mant_tmp_2_0_out1;



  assign cast_2_like_Mant_tmp_out1 = 25'b0000000000000000000000010;



  assign Mant_tmp_cast_2_like_Man_1 = {7'b0, Bit_Concat_out1_25};
  assign Mant_tmp_cast_2_like_Man_2 = {7'b0, cast_2_like_Mant_tmp_out1};
  assign Mant_tmp_cast_2_like_Man_add_temp = Mant_tmp_cast_2_like_Man_1 + Mant_tmp_cast_2_like_Man_2;
  assign Mant_tmp_cast_2_like_Man_out1 = Mant_tmp_cast_2_like_Man_add_temp[24:0];



  assign if_bitget_Mant_tmp_1_0_out1 = (alphabitget_Mant_tmp_1_0_out1 == 1'b0 ? Bit_Concat_out1_25 :
              Mant_tmp_cast_2_like_Man_out1);



  assign BitSlice2_out1_2 = if_bitget_Mant_tmp_1_0_out1[24];



  assign alpha127_out1 = 8'b01111111;



  assign if_sticky_3_out1 = (alpha127_6_out1 == 1'b0 ? alpha127_out1 :
              aExponent);



  assign Add3_out1 = if_sticky_3_out1 - DTC_out1;



  assign Constant1_out1_1 = 8'b00000001;



  assign Add2_out1_12 = Constant1_out1_1 + if_sticky_3_out1;



  assign Switch1_out1_14 = (Bit_Slice_out1_1 == 1'b0 ? Add3_out1 :
              Add2_out1_12);



  assign Constant1_out1_2 = 8'b00000001;



  assign exp_1_out1 = Switch1_out1_14 - Constant1_out1_2;



  assign Switch1_out1_15 = (Bit_Slice_out1_3 == 1'b0 ? Switch1_out1_14 :
              exp_1_out1);



  assign Switch_out1_16 = (alpha127_6_out1 == 1'b0 ? Switch1_out1_15 :
              Switch1_out1_14);



  assign cast_1_like_Exp_out1 = 8'b00000001;



  assign Exp_cast_1_like_Exp_out1 = Switch_out1_16 + cast_1_like_Exp_out1;



  assign if_bitget_Mant_tmp_Mant_tmp_Wor_out1 = (BitSlice2_out1_2 == 1'b0 ? Switch_out1_16 :
              Exp_cast_1_like_Exp_out1);



  assign aExponent_cfType_Exponent_I_out1 = aExponent == 8'b11111111;



  assign aMantissa_0_out1 = aMantissa != 23'b00000000000000000000000;



  assign Logical_Operator2_out1_12 = aExponent_cfType_Exponent_I_out1 & aMantissa_0_out1;



  assign Logical_Operator1_out1_14 = Logical_Operator2_out1_12 | aExponent_cfType_Exponent_I_1_out1;



  assign Constant_out1_10 = 8'b01111111;



  assign Switch_out1_17 = (Logical_Operator1_out1_14 == 1'b0 ? Constant_out1_10 :
              aExponent);



  assign if_aExponent_cfType_Exponent_out1 = (Logical_Operator_out1 == 1'b0 ? if_bitget_Mant_tmp_Mant_tmp_Wor_out1 :
              Switch_out1_17);



  assign BitSlice3_out1 = if_bitget_Mant_tmp_1_0_out1[23:1];



  assign C_out1_1 = 23'b00000000000000000000000;



  assign if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 = (BitSlice2_out1_2 == 1'b0 ? BitSlice3_out1 :
              C_out1_1);



  assign Constant1_out1_3 = 23'b00000000000000000000000;



  assign Switch1_out1_16 = (Logical_Operator1_out1_14 == 1'b0 ? Constant1_out1_3 :
              aMantissa);



  assign if_aExponent_cfType_Exponent_1_out1 = (Logical_Operator_out1 == 1'b0 ? if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 :
              Switch1_out1_16);



  // Combine FP sign, exponent, mantissa into 32 bit word
  assign nfp_out_pack = {aSign, if_aExponent_cfType_Exponent_out1, if_aExponent_cfType_Exponent_1_out1};



  assign nfp_out = nfp_out_pack;

endmodule  // nfp_tanh_single

